generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                                 Int                                 @id @default(autoincrement())
  email                              String                              @unique
  pseudo                             String                              @unique
  nom                                String?
  prenom                             String?
  password                           String?
  authProvider                       String                              @default("email") // "email", "google", "facebook"
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  lastLoginAt                        DateTime?
  profilePicture                     String?
  emailVerificationCode              String?
  isEmailVerified                    Boolean                             @default(false)
  verificationCodeExpiry             DateTime?
  isGlobalAdmin                      Boolean                             @default(false)
  phone                              String?
  preferredLanguage                  String                              @default("fr")
  notificationPreferences            Json?
  carpoolBookings                    CarpoolBooking[]
  carpoolComments                    CarpoolComment[]
  carpoolOffers                      CarpoolOffer[]
  carpoolPassengers                  CarpoolPassenger[]
  carpoolRequests                    CarpoolRequest[]
  carpoolRequestComments             CarpoolRequestComment[]
  permissionHistoryActions           CollaboratorPermissionHistory[]     @relation("CollaboratorPermissionHistory_actor")
  targetUserHistories                CollaboratorPermissionHistory[]     @relation("CollaboratorPermissionHistory_target")
  createdConventions                 Convention[]
  addedCollaborators                 ConventionCollaborator[]            @relation("AddedCollaborators")
  collaborations                     ConventionCollaborator[]
  createdEditions                    Edition[]                           @relation("CreatedEditions")
  editionPosts                       EditionPost[]
  editionPostComments                EditionPostComment[]
  volunteerApplications              EditionVolunteerApplication[]
  manuallyAddedVolunteers            EditionVolunteerApplication[]       @relation("ManuallyAddedVolunteers")
  feedbacks                          Feedback[]
  apiErrorLogs                       ApiErrorLog[]
  notifications                      Notification[]
  lostFoundComments                  LostFoundComment[]
  lostFoundItems                     LostFoundItem[]
  passwordResetTokens                PasswordResetToken[]
  favoriteEditions                   Edition[]                           @relation("FavoriteEditions")
  attendingEditions                  Edition[]                           @relation("AttendingEditions")
  pushSubscriptions                  PushSubscription[]
  volunteerNotificationGroups        VolunteerNotificationGroup[]
  volunteerNotificationConfirmations VolunteerNotificationConfirmation[]
  volunteerAssignments               VolunteerAssignment[]               @relation("VolunteerAssignment_user")
  assignedVolunteerSlots             VolunteerAssignment[]               @relation("VolunteerAssignment_assignedBy")
  claimRequests                      ConventionClaimRequest[]
  workshops                          Workshop[]
  workshopFavorites                  WorkshopFavorite[]
  artistProfiles                     EditionArtist[]
  validatedArtistEntries             EditionArtist[]                     @relation("ArtistEntryValidator")
}

model Edition {
  id                                Int                              @id @default(autoincrement())
  name                              String?
  description                       String?                          @db.Text
  program                           String?                          @db.Text
  createdAt                         DateTime                         @default(now())
  updatedAt                         DateTime                         @updatedAt
  creatorId                         Int? // Nullable pour éditions importées
  endDate                           DateTime
  startDate                         DateTime
  addressLine1                      String
  addressLine2                      String?
  city                              String
  country                           String
  postalCode                        String
  region                            String?
  latitude                          Float?
  longitude                         Float?
  facebookUrl                       String?
  instagramUrl                      String?
  ticketingUrl                      String?
  acceptsPets                       Boolean                          @default(false)
  hasFoodTrucks                     Boolean                          @default(false)
  hasGym                            Boolean                          @default(false)
  hasKidsZone                       Boolean                          @default(false)
  hasTentCamping                    Boolean                          @default(false)
  hasTruckCamping                   Boolean                          @default(false)
  imageUrl                          String?
  hasAccessibility                  Boolean                          @default(false)
  hasAerialSpace                    Boolean                          @default(false)
  hasCantine                        Boolean                          @default(false)
  hasConcert                        Boolean                          @default(false)
  hasFamilyCamping                  Boolean                          @default(false)
  hasSleepingRoom                   Boolean                          @default(false)
  hasFireSpace                      Boolean                          @default(false)
  hasGala                           Boolean                          @default(false)
  hasOpenStage                      Boolean                          @default(false)
  hasShowers                        Boolean                          @default(false)
  hasSlacklineSpace                 Boolean                          @default(false)
  hasToilets                        Boolean                          @default(false)
  hasWorkshops                      Boolean                          @default(false)
  hasCashPayment                    Boolean                          @default(false)
  hasCreditCardPayment              Boolean                          @default(false)
  hasAfjTokenPayment                Boolean                          @default(false)
  conventionId                      Int
  hasATM                            Boolean                          @default(false)
  hasLongShow                       Boolean                          @default(false)
  isOnline                          Boolean                          @default(false)
  volunteersDescription             String?                          @db.Text
  volunteersOpen                    Boolean                          @default(false)
  volunteersUpdatedAt               DateTime?
  volunteersExternalUrl             String?
  volunteersMode                    VolunteerMode                    @default(INTERNAL)
  volunteersAskDiet                 Boolean                          @default(false)
  volunteersAskAllergies            Boolean                          @default(false)
  officialWebsiteUrl                String?
  volunteersAskTimePreferences      Boolean                          @default(false)
  volunteersAskTeamPreferences      Boolean                          @default(false)
  volunteersAskPets                 Boolean                          @default(false)
  volunteersAskMinors               Boolean                          @default(false)
  volunteersAskVehicle              Boolean                          @default(false)
  volunteersAskCompanion            Boolean                          @default(false)
  volunteersAskAvoidList            Boolean                          @default(false)
  volunteersAskSkills               Boolean                          @default(false)
  volunteersAskExperience           Boolean                          @default(false)
  volunteersAskEmergencyContact     Boolean                          @default(false)
  volunteersTeardownEndDate         DateTime?
  volunteersSetupStartDate          DateTime?
  volunteersAskSetup                Boolean                          @default(false)
  volunteersAskTeardown             Boolean                          @default(false)
  workshopsEnabled                  Boolean                          @default(false)
  workshopLocationsFreeInput        Boolean                          @default(false)
  carpoolOffers                     CarpoolOffer[]
  carpoolRequests                   CarpoolRequest[]
  convention                        Convention                       @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  creator                           User?                            @relation("CreatedEditions", fields: [creatorId], references: [id])
  collaboratorPermissions           EditionCollaboratorPermission[]
  editionPosts                      EditionPost[]
  volunteerApplications             EditionVolunteerApplication[]
  lostFoundItems                    LostFoundItem[]
  favoritedBy                       User[]                           @relation("FavoriteEditions")
  attendingUsers                    User[]                           @relation("AttendingEditions")
  volunteerNotificationGroups       VolunteerNotificationGroup[]
  volunteerTeams                    VolunteerTeam[]
  volunteerTimeSlots                VolunteerTimeSlot[]
  externalTicketing                 ExternalTicketing?
  tiers                             TicketingTier[]
  ticketingQuotas                   TicketingQuota[]
  returnableItems                   TicketingReturnableItem[]
  options                           TicketingOption[]
  orders                            TicketingOrder[]
  volunteerTicketingReturnableItems EditionVolunteerReturnableItem[]
  tierCustomFields                  TicketingTierCustomField[]
  workshops                         Workshop[]
  workshopLocations                 WorkshopLocation[]
  artists                           EditionArtist[]
  shows                             Show[]
  volunteerMeals                    VolunteerMeal[]

  @@index([creatorId], map: "Edition_creatorId_fkey")
  @@index([conventionId], map: "Edition_conventionId_fkey")
}

model ConventionCollaborator {
  id                     Int                             @id @default(autoincrement())
  conventionId           Int
  userId                 Int
  addedAt                DateTime                        @default(now())
  addedById              Int
  canAddEdition          Boolean                         @default(false)
  canDeleteAllEditions   Boolean                         @default(false)
  canDeleteConvention    Boolean                         @default(false)
  canEditAllEditions     Boolean                         @default(false)
  canEditConvention      Boolean                         @default(false)
  canManageCollaborators Boolean                         @default(false)
  title                  String?
  canManageVolunteers    Boolean                         @default(false)
  canManageArtists       Boolean                         @default(false)
  addedBy                User                            @relation("AddedCollaborators", fields: [addedById], references: [id])
  convention             Convention                      @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  user                   User                            @relation(fields: [userId], references: [id], onDelete: Cascade)
  perEditionPermissions  EditionCollaboratorPermission[]

  @@unique([conventionId, userId])
  @@index([addedById], map: "ConventionCollaborator_addedById_fkey")
  @@index([userId], map: "ConventionCollaborator_userId_fkey")
}

enum CarpoolDirection {
  TO_EVENT // Aller vers la convention
  FROM_EVENT // Retour depuis la convention
}

model CarpoolOffer {
  id              Int                @id @default(autoincrement())
  userId          Int
  tripDate        DateTime
  locationCity    String
  locationAddress String
  availableSeats  Int
  direction       CarpoolDirection   @default(TO_EVENT)
  description     String?            @db.Text
  phoneNumber     String?
  smokingAllowed  Boolean            @default(false)
  petsAllowed     Boolean            @default(false)
  musicAllowed    Boolean            @default(false)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  editionId       Int
  bookings        CarpoolBooking[]
  comments        CarpoolComment[]
  edition         Edition            @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  passengers      CarpoolPassenger[]

  @@index([editionId], map: "CarpoolOffer_editionId_fkey")
  @@index([userId], map: "CarpoolOffer_userId_fkey")
}

model CarpoolRequest {
  id           Int                     @id @default(autoincrement())
  userId       Int
  tripDate     DateTime
  locationCity String
  seatsNeeded  Int                     @default(1)
  direction    CarpoolDirection        @default(TO_EVENT)
  description  String?                 @db.Text
  phoneNumber  String?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  editionId    Int
  bookings     CarpoolBooking[]
  edition      Edition                 @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments     CarpoolRequestComment[]

  @@index([editionId], map: "CarpoolRequest_editionId_fkey")
  @@index([userId], map: "CarpoolRequest_userId_fkey")
}

model CarpoolComment {
  id             Int          @id @default(autoincrement())
  carpoolOfferId Int
  userId         Int
  content        String       @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  carpoolOffer   CarpoolOffer @relation(fields: [carpoolOfferId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([carpoolOfferId], map: "CarpoolComment_carpoolOfferId_fkey")
  @@index([userId], map: "CarpoolComment_userId_fkey")
}

model CarpoolRequestComment {
  id               Int            @id @default(autoincrement())
  carpoolRequestId Int
  userId           Int
  content          String         @db.Text
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  carpoolRequest   CarpoolRequest @relation(fields: [carpoolRequestId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([carpoolRequestId], map: "CarpoolRequestComment_carpoolRequestId_fkey")
  @@index([userId], map: "CarpoolRequestComment_userId_fkey")
}

model CarpoolPassenger {
  id             Int          @id @default(autoincrement())
  carpoolOfferId Int
  userId         Int
  addedAt        DateTime     @default(now())
  addedById      Int
  carpoolOffer   CarpoolOffer @relation(fields: [carpoolOfferId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([carpoolOfferId, userId])
  @@index([carpoolOfferId], map: "CarpoolPassenger_carpoolOfferId_fkey")
  @@index([userId], map: "CarpoolPassenger_userId_fkey")
}

model CarpoolBooking {
  id             Int             @id @default(autoincrement())
  carpoolOfferId Int
  requestId      Int?
  requesterId    Int
  seats          Int
  message        String?         @db.Text
  status         BookingStatus   @default(PENDING)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  carpoolOffer   CarpoolOffer    @relation(fields: [carpoolOfferId], references: [id], onDelete: Cascade)
  carpoolRequest CarpoolRequest? @relation(fields: [requestId], references: [id])
  requester      User            @relation(fields: [requesterId], references: [id], onDelete: Cascade)

  @@index([carpoolOfferId], map: "CarpoolBooking_carpoolOfferId_fkey")
  @@index([requesterId], map: "CarpoolBooking_requesterId_fkey")
  @@index([requestId], map: "CarpoolBooking_requestId_fkey")
}

model Convention {
  id                Int                             @id @default(autoincrement())
  name              String
  description       String?                         @db.Text
  logo              String?
  email             String? // Email pour revendication
  createdAt         DateTime                        @default(now())
  updatedAt         DateTime                        @updatedAt
  authorId          Int? // Nullable pour conventions importées
  archivedAt        DateTime?
  isArchived        Boolean                         @default(false)
  permissionHistory CollaboratorPermissionHistory[]
  author            User?                           @relation(fields: [authorId], references: [id])
  collaborators     ConventionCollaborator[]
  editions          Edition[]
  claimRequests     ConventionClaimRequest[]

  @@index([authorId], map: "Convention_authorId_fkey")
}

model EditionCollaboratorPermission {
  id                  Int                    @id @default(autoincrement())
  collaboratorId      Int
  editionId           Int
  canEdit             Boolean                @default(false)
  canDelete           Boolean                @default(false)
  canManageVolunteers Boolean                @default(false)
  canManageArtists    Boolean                @default(false)
  collaborator        ConventionCollaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  edition             Edition                @relation(fields: [editionId], references: [id], onDelete: Cascade)

  @@unique([collaboratorId, editionId])
  @@index([editionId])
}

model CollaboratorPermissionHistory {
  id           Int                              @id @default(autoincrement())
  conventionId Int
  actorId      Int
  changeType   CollaboratorPermissionChangeType
  before       Json?
  after        Json?
  createdAt    DateTime                         @default(now())
  targetUserId Int?
  actor        User                             @relation("CollaboratorPermissionHistory_actor", fields: [actorId], references: [id], onDelete: Cascade)
  convention   Convention                       @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  targetUser   User?                            @relation("CollaboratorPermissionHistory_target", fields: [targetUserId], references: [id])

  @@index([conventionId])
  @@index([actorId])
  @@index([changeType])
  @@index([targetUserId])
}

model EditionPost {
  id        Int                  @id @default(autoincrement())
  editionId Int
  userId    Int
  content   String               @db.Text
  pinned    Boolean              @default(false)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  edition   Edition              @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  EditionPostComment[]

  @@index([editionId], map: "EditionPost_editionId_fkey")
  @@index([userId], map: "EditionPost_userId_fkey")
  @@index([pinned])
}

model EditionPostComment {
  id            Int         @id @default(autoincrement())
  editionPostId Int
  userId        Int
  content       String      @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  editionPost   EditionPost @relation(fields: [editionPostId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([editionPostId], map: "EditionPostComment_editionPostId_fkey")
  @@index([userId], map: "EditionPostComment_userId_fkey")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "PasswordResetToken_userId_fkey")
  @@index([token])
}

model LostFoundItem {
  id          Int                @id @default(autoincrement())
  editionId   Int
  userId      Int
  description String             @db.Text
  imageUrl    String?
  status      LostFoundStatus    @default(LOST)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  comments    LostFoundComment[]
  edition     Edition            @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([editionId], map: "LostFoundItem_editionId_fkey")
  @@index([userId], map: "LostFoundItem_userId_fkey")
}

model LostFoundComment {
  id              Int           @id @default(autoincrement())
  lostFoundItemId Int
  userId          Int
  content         String        @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  lostFoundItem   LostFoundItem @relation(fields: [lostFoundItemId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lostFoundItemId], map: "LostFoundComment_lostFoundItemId_fkey")
  @@index([userId], map: "LostFoundComment_userId_fkey")
}

model EditionVolunteerApplication {
  id                    Int                         @id @default(autoincrement())
  editionId             Int
  userId                Int
  status                VolunteerStatus             @default(PENDING)
  motivation            String?                     @db.Text
  allergies             String?                     @db.Text
  allergySeverity       AllergySeverity?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  decidedAt             DateTime?
  userSnapshotPhone     String?
  dietaryPreference     DietaryPreference           @default(NONE)
  timePreferences       Json?
  teamPreferences       Json?
  acceptanceNote        String?                     @db.Text
  hasPets               Boolean?
  petsDetails           String?                     @db.Text
  hasMinors             Boolean?
  minorsDetails         String?                     @db.Text
  hasVehicle            Boolean?
  vehicleDetails        String?                     @db.Text
  companionName         String?                     @db.Text
  avoidList             String?                     @db.Text
  skills                String?                     @db.Text
  hasExperience         Boolean?
  experienceDetails     String?                     @db.Text
  setupAvailability     Boolean?
  teardownAvailability  Boolean?
  eventAvailability     Boolean?
  arrivalDateTime       String?
  departureDateTime     String?
  emergencyContactName  String?
  emergencyContactPhone String?
  entryValidated        Boolean                     @default(false)
  entryValidatedAt      DateTime?
  entryValidatedBy      Int?
  source                VolunteerApplicationSource  @default(APPLICATION)
  addedById             Int?
  addedAt               DateTime?
  edition               Edition                     @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user                  User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  addedBy               User?                       @relation("ManuallyAddedVolunteers", fields: [addedById], references: [id], onDelete: SetNull)
  teamAssignments       ApplicationTeamAssignment[]
  mealSelections        VolunteerMealSelection[]

  @@unique([editionId, userId])
  @@index([editionId])
  @@index([status])
  @@index([userId], map: "EditionVolunteerApplication_userId_fkey")
  @@index([entryValidated])
  @@index([source])
  @@index([addedById])
}

model Feedback {
  id         Int          @id @default(autoincrement())
  type       FeedbackType
  subject    String
  message    String       @db.Text
  email      String?
  name       String?
  userId     Int?
  userAgent  String?      @db.Text
  url        String?      @db.Text
  resolved   Boolean      @default(false)
  adminNotes String?      @db.Text
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User?        @relation(fields: [userId], references: [id])

  @@index([userId], map: "Feedback_userId_fkey")
  @@index([type])
  @@index([resolved])
}

enum CollaboratorPermissionChangeType {
  CREATED
  RIGHTS_UPDATED
  PER_EDITIONS_UPDATED
  ARCHIVED
  UNARCHIVED
  REMOVED
}

enum VolunteerMode {
  INTERNAL
  EXTERNAL
}

enum DietaryPreference {
  NONE
  VEGETARIAN
  VEGAN
}

enum AllergySeverity {
  LIGHT
  MODERATE
  SEVERE
  CRITICAL
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum LostFoundStatus {
  LOST
  RETURNED
}

enum FeedbackType {
  BUG
  SUGGESTION
  GENERAL
  COMPLAINT
}

enum VolunteerStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum VolunteerApplicationSource {
  APPLICATION // Candidature spontanée via formulaire
  MANUAL // Ajout manuel par un organisateur
}

// ========== LOGS D'ERREURS ==========

model ApiErrorLog {
  id String @id @default(cuid())

  // Informations sur l'erreur
  message    String  @db.Text
  statusCode Int
  stack      String? @db.LongText
  errorType  String? // Type d'erreur (ValidationError, DatabaseError, etc.)

  // Contexte de la requête
  method    String // GET, POST, PUT, DELETE, etc.
  url       String  @db.Text
  path      String // URL path sans query params
  userAgent String? @db.Text
  ip        String?
  referer   String? @db.Text // Page d'origine de la requête
  origin    String? // Domaine d'origine

  // Données de la requête
  headers     Json? // Headers de la requête (sans données sensibles)
  body        Json? // Corps de la requête (sans données sensibles)
  queryParams Json? // Paramètres de requête

  // Informations utilisateur
  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  // Métadonnées
  resolved   Boolean   @default(false) // Marqué comme résolu par un admin
  resolvedBy Int?
  resolvedAt DateTime?
  adminNotes String?   @db.Text

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@index([statusCode])
  @@index([path])
  @@index([userId])
  @@index([resolved])
}

// ========== NOTIFICATIONS ==========

model Notification {
  id     String @id @default(cuid())
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Contenu de la notification
  type NotificationType

  // SYSTÈME DE TRADUCTION (notifications système)
  titleKey          String? // Clé de traduction pour le titre
  messageKey        String? // Clé de traduction pour le message
  translationParams Json? // Paramètres pour les traductions (noms, dates, etc.)
  actionTextKey     String? // Clé de traduction pour le texte du bouton

  // TEXTE LIBRE (notifications custom/orgas)
  titleText   String? @db.Text // Texte libre pour le titre
  messageText String? @db.Text // Texte libre pour le message
  actionText  String? // Texte libre pour le bouton d'action

  // Métadonnées pour le contexte
  category   String? // 'edition', 'volunteer', 'system', etc.
  entityType String? // Type d'entité liée (Edition, User, etc.)
  entityId   String? // ID de l'entité liée

  // États de lecture
  isRead Boolean   @default(false)
  readAt DateTime?

  // Actions optionnelles
  actionUrl String? @db.Text // URL vers laquelle rediriger

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Index pour optimiser les requêtes
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([category])
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    Int
  endpoint  String   @db.VarChar(500)
  p256dh    String   @db.VarChar(255)
  auth      String   @db.VarChar(255)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@index([userId])
}

// ========== NOTIFICATIONS BÉNÉVOLES ==========

model VolunteerNotificationGroup {
  id             String   @id @default(cuid())
  editionId      Int
  senderId       Int
  title          String
  message        String   @db.Text
  targetType     String // 'all' ou 'teams'
  selectedTeams  Json? // Array des équipes sélectionnées si targetType = 'teams'
  recipientCount Int
  sentAt         DateTime @default(now())

  edition       Edition                             @relation(fields: [editionId], references: [id], onDelete: Cascade)
  sender        User                                @relation(fields: [senderId], references: [id])
  confirmations VolunteerNotificationConfirmation[]

  @@index([editionId])
  @@index([senderId])
}

model VolunteerNotificationConfirmation {
  id                           String    @id @default(cuid())
  volunteerNotificationGroupId String
  userId                       Int
  confirmedAt                  DateTime?

  notificationGroup VolunteerNotificationGroup @relation(fields: [volunteerNotificationGroupId], references: [id], onDelete: Cascade)
  user              User                       @relation(fields: [userId], references: [id])

  @@unique([volunteerNotificationGroupId, userId])
  @@index([userId])
}

// ========== PLANNING BÉNÉVOLES ==========

model VolunteerTeam {
  id                    String   @id @default(cuid())
  editionId             Int
  name                  String
  description           String?  @db.Text
  color                 String   @default("#6b7280") @db.VarChar(7)
  maxVolunteers         Int?
  isRequired            Boolean  @default(false)
  isAccessControlTeam   Boolean  @default(false)
  isVisibleToVolunteers Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  edition              Edition                          @relation(fields: [editionId], references: [id], onDelete: Cascade)
  timeSlots            VolunteerTimeSlot[]
  assignedApplications ApplicationTeamAssignment[]
  returnableItems      EditionVolunteerReturnableItem[]

  @@index([editionId])
}

model VolunteerTimeSlot {
  id                 String   @id @default(cuid())
  editionId          Int
  teamId             String?
  title              String?
  description        String?  @db.Text
  startDateTime      DateTime
  endDateTime        DateTime
  maxVolunteers      Int      @default(1)
  assignedVolunteers Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  edition     Edition               @relation(fields: [editionId], references: [id], onDelete: Cascade)
  team        VolunteerTeam?        @relation(fields: [teamId], references: [id], onDelete: SetNull)
  assignments VolunteerAssignment[]

  @@index([editionId])
  @@index([teamId])
}

model VolunteerAssignment {
  id           String   @id @default(cuid())
  timeSlotId   String
  userId       Int
  assignedAt   DateTime @default(now())
  assignedById Int

  timeSlot   VolunteerTimeSlot @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  user       User              @relation("VolunteerAssignment_user", fields: [userId], references: [id], onDelete: Cascade)
  assignedBy User              @relation("VolunteerAssignment_assignedBy", fields: [assignedById], references: [id], onDelete: Cascade)

  @@unique([timeSlotId, userId])
  @@index([timeSlotId])
  @@index([userId])
  @@index([assignedById])
}

// ========== REVENDICATION DE CONVENTIONS ==========

model ConventionClaimRequest {
  id           String    @id @default(cuid())
  conventionId Int
  userId       Int
  code         String    @unique // Code de vérification envoyé par email
  expiresAt    DateTime // Expiration du code (ex: 1h)
  isVerified   Boolean   @default(false)
  verifiedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  convention Convention @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conventionId, userId]) // Un seul claim actif par convention/utilisateur
  @@index([conventionId])
  @@index([userId])
  @@index([code])
  @@index([expiresAt])
}

// ========== ASSIGNATION ÉQUIPES BÉNÉVOLES ==========

model ApplicationTeamAssignment {
  applicationId Int
  teamId        String
  isLeader      Boolean  @default(false)
  assignedAt    DateTime @default(now())

  application EditionVolunteerApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  team        VolunteerTeam               @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([applicationId, teamId])
  @@index([teamId])
  @@index([isLeader])
}

// ========== BILLETERIE EXTERNE ==========

enum ExternalTicketingProvider {
  HELLOASSO
  BILLETWEB
  WEEZEVENT
  OTHER
}

enum ExternalTicketingStatus {
  ACTIVE
  INACTIVE
  ERROR
}

enum VolunteerMealType {
  BREAKFAST
  LUNCH
  DINNER
}

enum VolunteerMealPhase {
  SETUP
  EVENT
  TEARDOWN
}

model ExternalTicketing {
  id         String                    @id @default(cuid())
  editionId  Int                       @unique
  provider   ExternalTicketingProvider
  status     ExternalTicketingStatus   @default(ACTIVE)
  lastSyncAt DateTime?
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt

  edition          Edition                    @relation(fields: [editionId], references: [id], onDelete: Cascade)
  helloAssoConfig  HelloAssoConfig?
  tiers            TicketingTier[]
  options          TicketingOption[]
  orders           TicketingOrder[]
  tierCustomFields TicketingTierCustomField[]

  @@index([editionId])
  @@index([provider])
  @@index([status])
}

model HelloAssoConfig {
  id                  String   @id @default(cuid())
  externalTicketingId String   @unique
  clientId            String
  clientSecret        String // Encrypted
  organizationSlug    String
  formType            String // Event, Membership, Donation, etc.
  formSlug            String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  externalTicketing ExternalTicketing @relation(fields: [externalTicketingId], references: [id], onDelete: Cascade)

  @@index([externalTicketingId])
}

model TicketingTier {
  id                  Int       @id @default(autoincrement())
  externalTicketingId String? // Null si tarif manuel (non HelloAsso)
  helloAssoTierId     Int? // ID du tarif dans HelloAsso, null si tarif manuel
  editionId           Int // Toujours associé à une édition
  name                String
  customName          String? // Nom personnalisé (prioritaire sur name si défini)
  description         String?   @db.Text
  price               Int // Prix en centimes
  minAmount           Int? // Montant minimum (pour tarifs libres)
  maxAmount           Int? // Montant maximum (pour tarifs libres)
  isActive            Boolean   @default(true)
  position            Int       @default(0) // Pour l'ordre d'affichage
  countAsParticipant  Boolean   @default(true) // Si ce tarif compte comme participant dans les stats
  validFrom           DateTime? // Date de début de validité (optionnel)
  validUntil          DateTime? // Date de fin de validité (optionnel)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  externalTicketing ExternalTicketing?                    @relation(fields: [externalTicketingId], references: [id], onDelete: Cascade)
  edition           Edition                               @relation(fields: [editionId], references: [id], onDelete: Cascade)
  quotas            TicketingTierQuota[]
  returnableItems   TicketingTierReturnableItem[]
  orderItems        TicketingOrderItem[]
  customFields      TicketingTierCustomFieldAssociation[]

  @@unique([externalTicketingId, helloAssoTierId])
  @@index([externalTicketingId])
  @@index([editionId])
}

model TicketingQuota {
  id          Int      @id @default(autoincrement())
  editionId   Int
  title       String
  description String?  @db.Text
  quantity    Int // Nombre (toujours positif)
  position    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  edition      Edition                         @relation(fields: [editionId], references: [id], onDelete: Cascade)
  tiers        TicketingTierQuota[]
  options      TicketingOptionQuota[]
  customFields TicketingTierCustomFieldQuota[]

  @@index([editionId])
}

model TicketingReturnableItem {
  id        Int      @id @default(autoincrement())
  editionId Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  edition                           Edition                                  @relation(fields: [editionId], references: [id], onDelete: Cascade)
  tiers                             TicketingTierReturnableItem[]
  options                           TicketingOptionReturnableItem[]
  volunteerTicketingReturnableItems EditionVolunteerReturnableItem[]
  customFields                      TicketingTierCustomFieldReturnableItem[]
  shows                             ShowReturnableItem[]
  meals                             VolunteerMealReturnableItem[]

  @@index([editionId])
}

model EditionVolunteerReturnableItem {
  id               Int      @id @default(autoincrement())
  editionId        Int
  returnableItemId Int
  teamId           String? // NULL = global (tous les bénévoles), défini = équipe spécifique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  edition        Edition                 @relation(fields: [editionId], references: [id], onDelete: Cascade)
  returnableItem TicketingReturnableItem @relation(fields: [returnableItemId], references: [id], onDelete: Cascade)
  team           VolunteerTeam?          @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([editionId, returnableItemId, teamId])
  @@index([editionId])
  @@index([returnableItemId])
  @@index([teamId])
}

model TicketingTierQuota {
  id      Int @id @default(autoincrement())
  tierId  Int
  quotaId Int

  tier  TicketingTier  @relation(fields: [tierId], references: [id], onDelete: Cascade)
  quota TicketingQuota @relation(fields: [quotaId], references: [id], onDelete: Cascade)

  @@unique([tierId, quotaId])
  @@index([tierId])
  @@index([quotaId])
}

model TicketingTierReturnableItem {
  id               Int @id @default(autoincrement())
  tierId           Int
  returnableItemId Int

  tier           TicketingTier           @relation(fields: [tierId], references: [id], onDelete: Cascade)
  returnableItem TicketingReturnableItem @relation(fields: [returnableItemId], references: [id], onDelete: Cascade)

  @@unique([tierId, returnableItemId])
  @@index([tierId])
  @@index([returnableItemId])
}

model TicketingOptionQuota {
  id       Int @id @default(autoincrement())
  optionId Int
  quotaId  Int

  option TicketingOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  quota  TicketingQuota  @relation(fields: [quotaId], references: [id], onDelete: Cascade)

  @@unique([optionId, quotaId])
  @@index([optionId])
  @@index([quotaId])
}

model TicketingOptionReturnableItem {
  id               Int @id @default(autoincrement())
  optionId         Int
  returnableItemId Int

  option         TicketingOption         @relation(fields: [optionId], references: [id], onDelete: Cascade)
  returnableItem TicketingReturnableItem @relation(fields: [returnableItemId], references: [id], onDelete: Cascade)

  @@unique([optionId, returnableItemId])
  @@index([optionId])
  @@index([returnableItemId])
}

model TicketingOption {
  id                  Int      @id @default(autoincrement())
  externalTicketingId String? // Null si option manuelle (non HelloAsso)
  helloAssoOptionId   String? // ID de l'option dans HelloAsso, null si option manuelle
  editionId           Int // Toujours associé à une édition
  name                String
  description         String?  @db.Text
  type                String // TextInput, CheckBox, Select, etc.
  isRequired          Boolean  @default(false)
  choices             Json? // Array de choix pour les Select/MultipleChoice
  price               Int? // Prix de l'option en centimes (null si pas de prix)
  position            Int      @default(0) // Pour l'ordre d'affichage
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  externalTicketing ExternalTicketing?              @relation(fields: [externalTicketingId], references: [id], onDelete: Cascade)
  edition           Edition                         @relation(fields: [editionId], references: [id], onDelete: Cascade)
  quotas            TicketingOptionQuota[]
  returnableItems   TicketingOptionReturnableItem[]

  @@unique([externalTicketingId, helloAssoOptionId])
  @@index([externalTicketingId])
  @@index([editionId])
}

model TicketingOrder {
  id                  Int     @id @default(autoincrement())
  externalTicketingId String? // Nullable pour les commandes manuelles
  helloAssoOrderId    Int? // Nullable pour les commandes manuelles
  editionId           Int // Lien direct vers l'édition

  // Informations du payeur
  payerFirstName String
  payerLastName  String
  payerEmail     String

  // Montant et statut
  amount Int // Montant total en centimes
  status String // Processed, Refunded, etc.

  // Date de la commande
  orderDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  edition           Edition              @relation(fields: [editionId], references: [id], onDelete: Cascade)
  externalTicketing ExternalTicketing?   @relation(fields: [externalTicketingId], references: [id], onDelete: Cascade)
  items             TicketingOrderItem[]

  @@unique([externalTicketingId, helloAssoOrderId])
  @@index([externalTicketingId])
  @@index([editionId])
  @@index([payerEmail])
}

model TicketingOrderItem {
  id              Int  @id @default(autoincrement())
  orderId         Int // Lien vers TicketingOrder
  helloAssoItemId Int? // Nullable pour les participants ajoutés manuellement
  tierId          Int? // Lien vers le tarif HelloAsso

  // Informations du participant (peut différer du payeur)
  firstName String?
  lastName  String?
  email     String?

  // Détails du billet
  name   String? // Nom du tarif
  type   String? // Type d'item HelloAsso (Donation, Payment, Membership, etc.)
  amount Int // Prix payé en centimes
  state  String // Processed, Refunded, etc.
  qrCode String? // Code QR pour le contrôle d'accès

  // Champs personnalisés (réponses aux options)
  customFields Json?

  // Validation d'entrée
  entryValidated   Boolean   @default(false)
  entryValidatedAt DateTime?
  entryValidatedBy Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order TicketingOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  tier  TicketingTier? @relation(fields: [tierId], references: [id])

  @@index([orderId])
  @@index([tierId])
  @@index([helloAssoItemId])
  @@index([email])
  @@index([qrCode])
  @@index([entryValidated])
}

// ========== WORKSHOPS ==========

model Workshop {
  id              Int      @id @default(autoincrement())
  editionId       Int
  creatorId       Int
  title           String
  description     String?  @db.Text
  startDateTime   DateTime
  endDateTime     DateTime
  maxParticipants Int?
  locationId      Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  edition   Edition            @relation(fields: [editionId], references: [id], onDelete: Cascade)
  creator   User               @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  location  WorkshopLocation?  @relation(fields: [locationId], references: [id], onDelete: SetNull)
  favorites WorkshopFavorite[]

  @@index([editionId])
  @@index([creatorId])
  @@index([startDateTime])
  @@index([locationId])
}

model WorkshopFavorite {
  id         Int      @id @default(autoincrement())
  workshopId Int
  userId     Int
  createdAt  DateTime @default(now())

  workshop Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workshopId, userId])
  @@index([workshopId])
  @@index([userId])
}

model WorkshopLocation {
  id        Int      @id @default(autoincrement())
  editionId Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  edition   Edition    @relation(fields: [editionId], references: [id], onDelete: Cascade)
  workshops Workshop[]

  @@index([editionId])
}

model EditionArtist {
  id                      Int               @id @default(autoincrement())
  editionId               Int
  userId                  Int
  arrivalDateTime         String?
  departureDateTime       String?
  dietaryPreference       DietaryPreference @default(NONE)
  allergies               String?           @db.Text
  allergySeverity         AllergySeverity?
  entryValidated          Boolean           @default(false)
  entryValidatedAt        DateTime?
  entryValidatedBy        Int?
  payment                 Decimal?          @db.Decimal(10, 2)
  paymentPaid             Boolean           @default(false)
  reimbursementMax        Decimal?          @db.Decimal(10, 2)
  reimbursementActual     Decimal?          @db.Decimal(10, 2)
  reimbursementActualPaid Boolean           @default(false)
  organizerNotes          String?           @db.Text
  accommodationAutonomous Boolean           @default(false)
  accommodationProposal   String?           @db.Text
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt

  edition              Edition               @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  entryValidatedByUser User?                 @relation("ArtistEntryValidator", fields: [entryValidatedBy], references: [id], onDelete: SetNull)
  shows                ShowArtist[]
  mealSelections       ArtistMealSelection[]

  @@unique([editionId, userId])
  @@index([editionId])
  @@index([userId])
  @@index([entryValidatedBy])
}

model Show {
  id            Int      @id @default(autoincrement())
  editionId     Int
  title         String
  description   String?  @db.Text
  startDateTime DateTime
  duration      Int?
  location      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  edition         Edition              @relation(fields: [editionId], references: [id], onDelete: Cascade)
  artists         ShowArtist[]
  returnableItems ShowReturnableItem[]

  @@index([editionId])
  @@index([startDateTime])
}

model ShowArtist {
  id        Int      @id @default(autoincrement())
  showId    Int
  artistId  Int
  createdAt DateTime @default(now())

  show   Show          @relation(fields: [showId], references: [id], onDelete: Cascade)
  artist EditionArtist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([showId, artistId])
  @@index([showId])
  @@index([artistId])
}

model ShowReturnableItem {
  id               Int      @id @default(autoincrement())
  showId           Int
  returnableItemId Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  show           Show                    @relation(fields: [showId], references: [id], onDelete: Cascade)
  returnableItem TicketingReturnableItem @relation(fields: [returnableItemId], references: [id], onDelete: Cascade)

  @@unique([showId, returnableItemId])
  @@index([showId])
  @@index([returnableItemId])
}

model TicketingTierCustomField {
  id                     Int      @id @default(autoincrement())
  helloAssoCustomFieldId Int? // ID du custom field dans HelloAsso (null si manuel)
  externalTicketingId    String? // Lien vers la configuration HelloAsso (null si manuel)
  editionId              Int // Lien direct vers l'édition
  label                  String   @db.Text
  type                   String // YesNo, ChoiceList, TextInput, etc.
  isRequired             Boolean  @default(false)
  values                 Json? // Array de valeurs possibles (pour ChoiceList)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  externalTicketing ExternalTicketing?                       @relation(fields: [externalTicketingId], references: [id], onDelete: Cascade)
  edition           Edition                                  @relation(fields: [editionId], references: [id], onDelete: Cascade)
  tiers             TicketingTierCustomFieldAssociation[]
  quotas            TicketingTierCustomFieldQuota[]
  returnableItems   TicketingTierCustomFieldReturnableItem[]

  @@unique([externalTicketingId, helloAssoCustomFieldId])
  @@index([externalTicketingId])
  @@index([editionId])
}

model TicketingTierCustomFieldAssociation {
  id            Int @id @default(autoincrement())
  tierId        Int
  customFieldId Int

  tier        TicketingTier            @relation(fields: [tierId], references: [id], onDelete: Cascade)
  customField TicketingTierCustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)

  @@unique([tierId, customFieldId])
  @@index([tierId])
  @@index([customFieldId])
}

// Association custom field -> quota (avec choix optionnel pour ChoiceList)
model TicketingTierCustomFieldQuota {
  id            Int     @id @default(autoincrement())
  customFieldId Int
  quotaId       Int
  choiceValue   String? // Si le custom field est de type ChoiceList, le choix spécifique qui déclenche le quota

  customField TicketingTierCustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  quota       TicketingQuota           @relation(fields: [quotaId], references: [id], onDelete: Cascade)

  @@unique([customFieldId, quotaId, choiceValue])
  @@index([customFieldId])
  @@index([quotaId])
}

// Association custom field -> article à restituer (avec choix optionnel pour ChoiceList)
model TicketingTierCustomFieldReturnableItem {
  id               Int     @id @default(autoincrement())
  customFieldId    Int
  returnableItemId Int
  choiceValue      String? // Si le custom field est de type ChoiceList, le choix spécifique qui déclenche la restitution

  customField    TicketingTierCustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  returnableItem TicketingReturnableItem  @relation(fields: [returnableItemId], references: [id], onDelete: Cascade)

  @@unique([customFieldId, returnableItemId, choiceValue])
  @@index([customFieldId])
  @@index([returnableItemId])
}

// ========== VOLUNTEER MEALS ==========

model VolunteerMeal {
  id        Int                @id @default(autoincrement())
  editionId Int
  date      DateTime           @db.Date
  mealType  VolunteerMealType
  enabled   Boolean            @default(true)
  phase     VolunteerMealPhase
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  edition              Edition                       @relation(fields: [editionId], references: [id], onDelete: Cascade)
  mealSelections       VolunteerMealSelection[]
  artistMealSelections ArtistMealSelection[]
  returnableItems      VolunteerMealReturnableItem[]

  @@unique([editionId, date, mealType])
  @@index([editionId])
  @@index([date])
}

model VolunteerMealSelection {
  id          Int      @id @default(autoincrement())
  volunteerId Int
  mealId      Int
  accepted    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  volunteer EditionVolunteerApplication @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  meal      VolunteerMeal               @relation(fields: [mealId], references: [id], onDelete: Cascade)

  @@unique([volunteerId, mealId])
  @@index([volunteerId])
  @@index([mealId])
}

model ArtistMealSelection {
  id        Int      @id @default(autoincrement())
  artistId  Int
  mealId    Int
  accepted  Boolean  @default(true)
  afterShow Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artist EditionArtist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  meal   VolunteerMeal @relation(fields: [mealId], references: [id], onDelete: Cascade)

  @@unique([artistId, mealId])
  @@index([artistId])
  @@index([mealId])
}

// Association repas -> articles à restituer
model VolunteerMealReturnableItem {
  id               Int      @id @default(autoincrement())
  mealId           Int
  returnableItemId Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  meal           VolunteerMeal           @relation(fields: [mealId], references: [id], onDelete: Cascade)
  returnableItem TicketingReturnableItem @relation(fields: [returnableItemId], references: [id], onDelete: Cascade)

  @@unique([mealId, returnableItemId])
  @@index([mealId])
  @@index([returnableItemId])
}

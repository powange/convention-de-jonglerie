generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CollaboratorRole {
  MODERATOR     // Peut gérer uniquement les éditions
  ADMINISTRATOR // Peut gérer la convention, les éditions et ajouter des collaborateurs
}

model User {
  id                     Int                      @id @default(autoincrement())
  email                  String                   @unique
  pseudo                 String                   @unique
  nom                    String
  prenom                 String
  password               String
  isEmailVerified        Boolean                  @default(false)
  emailVerificationCode  String?
  verificationCodeExpiry DateTime?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  profilePicture         String?
  carpoolComments        CarpoolComment[]
  carpoolOffers          CarpoolOffer[]
  carpoolRequests        CarpoolRequest[]
  carpoolRequestComments CarpoolRequestComment[]
  carpoolPassengers      CarpoolPassenger[]
  editionPosts           EditionPost[]
  editionPostComments    EditionPostComment[]
  createdConventions     Convention[]
  addedCollaborators     ConventionCollaborator[] @relation("AddedCollaborators")
  collaborations         ConventionCollaborator[]
  createdEditions        Edition[]                @relation("CreatedEditions")
  favoriteEditions       Edition[]                @relation("FavoriteEditions")
}

model Edition {
  id                   Int                      @id @default(autoincrement())
  name                 String?
  description          String?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  creatorId            Int
  conventionId         Int
  endDate              DateTime
  startDate            DateTime
  addressLine1         String
  addressLine2         String?
  city                 String
  country              String
  postalCode           String
  region               String?
  latitude             Float?
  longitude            Float?
  facebookUrl          String?
  instagramUrl         String?
  ticketingUrl         String?
  acceptsPets          Boolean                  @default(false)
  hasFoodTrucks        Boolean                  @default(false)
  hasGym               Boolean                  @default(false)
  hasKidsZone          Boolean                  @default(false)
  hasTentCamping       Boolean                  @default(false)
  hasTruckCamping      Boolean                  @default(false)
  imageUrl             String?
  hasAccessibility     Boolean                  @default(false)
  hasAerialSpace       Boolean                  @default(false)
  hasCantine           Boolean                  @default(false)
  hasConcert           Boolean                  @default(false)
  hasFamilyCamping     Boolean                  @default(false)
  hasFireSpace         Boolean                  @default(false)
  hasGala              Boolean                  @default(false)
  hasOpenStage         Boolean                  @default(false)
  hasShowers           Boolean                  @default(false)
  hasSlacklineSpace    Boolean                  @default(false)
  hasToilets           Boolean                  @default(false)
  hasWorkshops         Boolean                  @default(false)
  hasAfjTokenPayment   Boolean                  @default(false)
  hasCreditCardPayment Boolean                  @default(false)
  hasLongShow          Boolean                  @default(false)
  hasATM               Boolean                  @default(false)
  carpoolOffers        CarpoolOffer[]
  carpoolRequests      CarpoolRequest[]
  editionPosts         EditionPost[]
  creator              User                     @relation("CreatedEditions", fields: [creatorId], references: [id])
  favoritedBy          User[]                   @relation("FavoriteEditions")
  convention           Convention               @relation(fields: [conventionId], references: [id])

  @@index([creatorId], map: "Edition_creatorId_fkey")
  @@index([conventionId], map: "Edition_conventionId_fkey")
}

model ConventionCollaborator {
  id           Int              @id @default(autoincrement())
  conventionId Int
  userId       Int
  role         CollaboratorRole @default(MODERATOR)
  addedAt      DateTime         @default(now())
  addedById    Int
  addedBy      User             @relation("AddedCollaborators", fields: [addedById], references: [id])
  convention   Convention       @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conventionId, userId])
  @@index([addedById], map: "ConventionCollaborator_addedById_fkey")
  @@index([userId], map: "ConventionCollaborator_userId_fkey")
}

model CarpoolOffer {
  id               Int                @id @default(autoincrement())
  userId           Int
  departureDate    DateTime
  departureCity    String
  departureAddress String
  availableSeats   Int
  description      String?            @db.Text
  phoneNumber      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  editionId        Int
  comments         CarpoolComment[]
  passengers       CarpoolPassenger[]
  edition          Edition            @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([editionId], map: "CarpoolOffer_editionId_fkey")
  @@index([userId], map: "CarpoolOffer_userId_fkey")
}

model CarpoolRequest {
  id            Int                     @id @default(autoincrement())
  userId        Int
  departureDate DateTime
  departureCity String
  seatsNeeded   Int                     @default(1)
  description   String?                 @db.Text
  phoneNumber   String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  editionId     Int
  edition       Edition                 @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user          User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      CarpoolRequestComment[]

  @@index([editionId], map: "CarpoolRequest_editionId_fkey")
  @@index([userId], map: "CarpoolRequest_userId_fkey")
}

model CarpoolComment {
  id             Int          @id @default(autoincrement())
  carpoolOfferId Int
  userId         Int
  content        String       @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  carpoolOffer   CarpoolOffer @relation(fields: [carpoolOfferId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([carpoolOfferId], map: "CarpoolComment_carpoolOfferId_fkey")
  @@index([userId], map: "CarpoolComment_userId_fkey")
}

model CarpoolRequestComment {
  id               Int            @id @default(autoincrement())
  carpoolRequestId Int
  userId           Int
  content          String         @db.Text
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  carpoolRequest   CarpoolRequest @relation(fields: [carpoolRequestId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([carpoolRequestId], map: "CarpoolRequestComment_carpoolRequestId_fkey")
  @@index([userId], map: "CarpoolRequestComment_userId_fkey")
}

model CarpoolPassenger {
  id             Int          @id @default(autoincrement())
  carpoolOfferId Int
  userId         Int
  addedAt        DateTime     @default(now())
  addedById      Int
  carpoolOffer   CarpoolOffer @relation(fields: [carpoolOfferId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([carpoolOfferId, userId])
  @@index([carpoolOfferId], map: "CarpoolPassenger_carpoolOfferId_fkey")
  @@index([userId], map: "CarpoolPassenger_userId_fkey")
}

model Convention {
  id          Int       @id @default(autoincrement())
  name        String
  description String?   @db.Text
  logo        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])
  editions    Edition[]
  collaborators ConventionCollaborator[]

  @@index([authorId], map: "Convention_authorId_fkey")
}

model EditionPost {
  id          Int              @id @default(autoincrement())
  editionId   Int
  userId      Int
  content     String           @db.Text
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  edition     Edition          @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    EditionPostComment[]

  @@index([editionId], map: "EditionPost_editionId_fkey")
  @@index([userId], map: "EditionPost_userId_fkey")
}

model EditionPostComment {
  id            Int         @id @default(autoincrement())
  editionPostId Int
  userId        Int
  content       String      @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  editionPost   EditionPost @relation(fields: [editionPostId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([editionPostId], map: "EditionPostComment_editionPostId_fkey")
  @@index([userId], map: "EditionPostComment_userId_fkey")
}

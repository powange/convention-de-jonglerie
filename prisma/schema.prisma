generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Historique des changements de permissions collaborateurs
enum CollaboratorPermissionChangeType {
  CREATED
  RIGHTS_UPDATED
  PER_EDITIONS_UPDATED
  ARCHIVED
  UNARCHIVED
  REMOVED
}

// Mode de gestion des bénévoles
enum VolunteerMode {
  INTERNAL
  EXTERNAL
}

// Préférences alimentaires pour les candidatures bénévoles
enum DietaryPreference {
  NONE
  VEGETARIAN
  VEGAN
}

model User {
  id                       Int                             @id @default(autoincrement())
  email                    String                          @unique
  pseudo                   String                          @unique
  nom                      String
  prenom                   String
  password                 String
  phone                    String? // Numéro de téléphone optionnel, requis seulement pour postuler bénévole
  isEmailVerified          Boolean                         @default(false)
  isGlobalAdmin            Boolean                         @default(false)
  emailVerificationCode    String?
  verificationCodeExpiry   DateTime?
  createdAt                DateTime                        @default(now())
  updatedAt                DateTime                        @updatedAt
  profilePicture           String?
  carpoolComments          CarpoolComment[]
  carpoolOffers            CarpoolOffer[]
  carpoolRequests          CarpoolRequest[]
  carpoolRequestComments   CarpoolRequestComment[]
  carpoolPassengers        CarpoolPassenger[]
  editionPosts             EditionPost[]
  editionPostComments      EditionPostComment[]
  createdConventions       Convention[]
  addedCollaborators       ConventionCollaborator[]        @relation("AddedCollaborators")
  collaborations           ConventionCollaborator[]
  createdEditions          Edition[]                       @relation("CreatedEditions")
  favoriteEditions         Edition[]                       @relation("FavoriteEditions")
  passwordResetTokens      PasswordResetToken[]
  lostFoundItems           LostFoundItem[]
  lostFoundComments        LostFoundComment[]
  feedbacks                Feedback[]
  carpoolBookings          CarpoolBooking[]
  permissionHistoryActions CollaboratorPermissionHistory[] @relation("CollaboratorPermissionHistory_actor")
  targetUserHistories      CollaboratorPermissionHistory[] @relation("CollaboratorPermissionHistory_target")
  volunteerApplications    EditionVolunteerApplication[]
}

model Edition {
  id                      Int                             @id @default(autoincrement())
  name                    String?
  description             String?
  createdAt               DateTime                        @default(now())
  updatedAt               DateTime                        @updatedAt
  creatorId               Int
  conventionId            Int
  endDate                 DateTime
  startDate               DateTime
  addressLine1            String
  addressLine2            String?
  city                    String
  country                 String
  postalCode              String
  region                  String?
  latitude                Float?
  longitude               Float?
  facebookUrl             String?
  instagramUrl            String?
  ticketingUrl            String?
  officialWebsiteUrl      String?
  acceptsPets             Boolean                         @default(false)
  hasFoodTrucks           Boolean                         @default(false)
  hasGym                  Boolean                         @default(false)
  hasKidsZone             Boolean                         @default(false)
  hasTentCamping          Boolean                         @default(false)
  hasTruckCamping         Boolean                         @default(false)
  imageUrl                String?
  hasAccessibility        Boolean                         @default(false)
  hasAerialSpace          Boolean                         @default(false)
  hasCantine              Boolean                         @default(false)
  hasConcert              Boolean                         @default(false)
  hasFamilyCamping        Boolean                         @default(false)
  hasFireSpace            Boolean                         @default(false)
  hasGala                 Boolean                         @default(false)
  hasOpenStage            Boolean                         @default(false)
  hasShowers              Boolean                         @default(false)
  hasSlacklineSpace       Boolean                         @default(false)
  hasToilets              Boolean                         @default(false)
  hasWorkshops            Boolean                         @default(false)
  hasAfjTokenPayment      Boolean                         @default(false)
  hasCreditCardPayment    Boolean                         @default(false)
  hasLongShow             Boolean                         @default(false)
  hasATM                  Boolean                         @default(false)
  isOnline                Boolean                         @default(false)
  carpoolOffers           CarpoolOffer[]
  carpoolRequests         CarpoolRequest[]
  editionPosts            EditionPost[]
  lostFoundItems          LostFoundItem[]
  creator                 User                            @relation("CreatedEditions", fields: [creatorId], references: [id])
  favoritedBy             User[]                          @relation("FavoriteEditions")
  convention              Convention                      @relation(fields: [conventionId], references: [id])
  collaboratorPermissions EditionCollaboratorPermission[]
  // Bénévolat
  volunteersOpen          Boolean                         @default(false)
  volunteersDescription   String?                         @db.Text
  volunteersUpdatedAt     DateTime?
  volunteersMode          VolunteerMode                   @default(INTERNAL)
  volunteersExternalUrl   String?
  // Demander la préférence alimentaire dans le formulaire interne ?
  volunteersAskDiet       Boolean                         @default(false)
  // Demander les allergies dans le formulaire interne ? (champ texte libre)
  volunteersAskAllergies  Boolean                         @default(false)
  // Demander les préférences horaires dans le formulaire interne ?
  volunteersAskTimePreferences Boolean                    @default(false)
  volunteerApplications   EditionVolunteerApplication[]

  @@index([creatorId], map: "Edition_creatorId_fkey")
  @@index([conventionId], map: "Edition_conventionId_fkey")
}

model ConventionCollaborator {
  id                     Int                             @id @default(autoincrement())
  conventionId           Int
  userId                 Int
  title                  String?
  canEditConvention      Boolean                         @default(false)
  canDeleteConvention    Boolean                         @default(false)
  canManageCollaborators Boolean                         @default(false)
  canAddEdition          Boolean                         @default(false)
  canEditAllEditions     Boolean                         @default(false)
  canDeleteAllEditions   Boolean                         @default(false)
  addedAt                DateTime                        @default(now())
  addedById              Int
  addedBy                User                            @relation("AddedCollaborators", fields: [addedById], references: [id])
  convention             Convention                      @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  user                   User                            @relation(fields: [userId], references: [id], onDelete: Cascade)
  perEditionPermissions  EditionCollaboratorPermission[]
  // historique supprimé: désormais l'historique référence uniquement targetUserId

  @@unique([conventionId, userId])
  @@index([addedById], map: "ConventionCollaborator_addedById_fkey")
  @@index([userId], map: "ConventionCollaborator_userId_fkey")
}

model CarpoolOffer {
  id               Int                @id @default(autoincrement())
  userId           Int
  departureDate    DateTime
  departureCity    String
  departureAddress String
  availableSeats   Int
  description      String?            @db.Text
  phoneNumber      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  editionId        Int
  comments         CarpoolComment[]
  passengers       CarpoolPassenger[]
  bookings         CarpoolBooking[]
  edition          Edition            @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([editionId], map: "CarpoolOffer_editionId_fkey")
  @@index([userId], map: "CarpoolOffer_userId_fkey")
}

model CarpoolRequest {
  id            Int                     @id @default(autoincrement())
  userId        Int
  departureDate DateTime
  departureCity String
  seatsNeeded   Int                     @default(1)
  description   String?                 @db.Text
  phoneNumber   String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  editionId     Int
  edition       Edition                 @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user          User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      CarpoolRequestComment[]
  bookings      CarpoolBooking[]

  @@index([editionId], map: "CarpoolRequest_editionId_fkey")
  @@index([userId], map: "CarpoolRequest_userId_fkey")
}

model CarpoolComment {
  id             Int          @id @default(autoincrement())
  carpoolOfferId Int
  userId         Int
  content        String       @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  carpoolOffer   CarpoolOffer @relation(fields: [carpoolOfferId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([carpoolOfferId], map: "CarpoolComment_carpoolOfferId_fkey")
  @@index([userId], map: "CarpoolComment_userId_fkey")
}

model CarpoolRequestComment {
  id               Int            @id @default(autoincrement())
  carpoolRequestId Int
  userId           Int
  content          String         @db.Text
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  carpoolRequest   CarpoolRequest @relation(fields: [carpoolRequestId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([carpoolRequestId], map: "CarpoolRequestComment_carpoolRequestId_fkey")
  @@index([userId], map: "CarpoolRequestComment_userId_fkey")
}

model CarpoolPassenger {
  id             Int          @id @default(autoincrement())
  carpoolOfferId Int
  userId         Int
  addedAt        DateTime     @default(now())
  addedById      Int
  carpoolOffer   CarpoolOffer @relation(fields: [carpoolOfferId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([carpoolOfferId, userId])
  @@index([carpoolOfferId], map: "CarpoolPassenger_carpoolOfferId_fkey")
  @@index([userId], map: "CarpoolPassenger_userId_fkey")
}

// Réservations de covoiturage (un utilisateur peut réserver plusieurs places, avec workflow d'acceptation)
enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

model CarpoolBooking {
  id             Int           @id @default(autoincrement())
  carpoolOfferId Int
  requestId      Int? // Lien optionnel vers une demande existante
  requesterId    Int // Utilisateur qui réserve
  seats          Int // Nombre de places demandées
  message        String?       @db.Text
  status         BookingStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  carpoolOffer   CarpoolOffer    @relation(fields: [carpoolOfferId], references: [id], onDelete: Cascade)
  requester      User            @relation(fields: [requesterId], references: [id], onDelete: Cascade)
  carpoolRequest CarpoolRequest? @relation(fields: [requestId], references: [id], onDelete: SetNull)

  @@index([carpoolOfferId], map: "CarpoolBooking_carpoolOfferId_fkey")
  @@index([requesterId], map: "CarpoolBooking_requesterId_fkey")
  @@index([requestId], map: "CarpoolBooking_requestId_fkey")
}

model Convention {
  id                Int                             @id @default(autoincrement())
  name              String
  description       String?                         @db.Text
  logo              String?
  createdAt         DateTime                        @default(now())
  updatedAt         DateTime                        @updatedAt
  authorId          Int
  author            User                            @relation(fields: [authorId], references: [id])
  editions          Edition[]
  collaborators     ConventionCollaborator[]
  isArchived        Boolean                         @default(false)
  archivedAt        DateTime?
  permissionHistory CollaboratorPermissionHistory[]

  @@index([authorId], map: "Convention_authorId_fkey")
}

// Permissions spécifiques par édition (complément aux droits globaux)
model EditionCollaboratorPermission {
  id             Int                    @id @default(autoincrement())
  collaboratorId Int
  editionId      Int
  canEdit        Boolean                @default(false)
  canDelete      Boolean                @default(false)
  collaborator   ConventionCollaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  edition        Edition                @relation(fields: [editionId], references: [id], onDelete: Cascade)

  @@unique([collaboratorId, editionId])
  @@index([editionId])
}

// Historique des modifications de permissions et d'archivage
model CollaboratorPermissionHistory {
  id           Int                              @id @default(autoincrement())
  conventionId Int
  targetUserId Int? // utilisateur directement concerné (collaborateur visé). Null pour ARCHIVED/UNARCHIVED
  actorId      Int
  changeType   CollaboratorPermissionChangeType
  before       Json?
  after        Json?
  createdAt    DateTime                         @default(now())
  convention   Convention                       @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  actor        User                             @relation("CollaboratorPermissionHistory_actor", fields: [actorId], references: [id], onDelete: Cascade)
  targetUser   User?                            @relation("CollaboratorPermissionHistory_target", fields: [targetUserId], references: [id], onDelete: SetNull)

  @@index([conventionId])
  @@index([actorId])
  @@index([changeType])
  @@index([targetUserId])
}

model EditionPost {
  id        Int                  @id @default(autoincrement())
  editionId Int
  userId    Int
  content   String               @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  edition   Edition              @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  EditionPostComment[]

  @@index([editionId], map: "EditionPost_editionId_fkey")
  @@index([userId], map: "EditionPost_userId_fkey")
}

model EditionPostComment {
  id            Int         @id @default(autoincrement())
  editionPostId Int
  userId        Int
  content       String      @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  editionPost   EditionPost @relation(fields: [editionPostId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([editionPostId], map: "EditionPostComment_editionPostId_fkey")
  @@index([userId], map: "EditionPostComment_userId_fkey")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "PasswordResetToken_userId_fkey")
  @@index([token], map: "PasswordResetToken_token_idx")
}

enum LostFoundStatus {
  LOST // Objet perdu
  RETURNED // Objet restitué
}

model LostFoundItem {
  id          Int                @id @default(autoincrement())
  editionId   Int
  userId      Int // Utilisateur qui a créé l'annonce (doit être collaborateur)
  description String             @db.Text
  imageUrl    String?
  status      LostFoundStatus    @default(LOST)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  edition     Edition            @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    LostFoundComment[]

  @@index([editionId], map: "LostFoundItem_editionId_fkey")
  @@index([userId], map: "LostFoundItem_userId_fkey")
}

model LostFoundComment {
  id              Int           @id @default(autoincrement())
  lostFoundItemId Int
  userId          Int
  content         String        @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  lostFoundItem   LostFoundItem @relation(fields: [lostFoundItemId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lostFoundItemId], map: "LostFoundComment_lostFoundItemId_fkey")
  @@index([userId], map: "LostFoundComment_userId_fkey")
}

enum FeedbackType {
  BUG // Signalement de bug
  SUGGESTION // Suggestion d'amélioration
  GENERAL // Commentaire général
  COMPLAINT // Plainte ou problème
}

// Statut candidature bénévole
enum VolunteerStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Candidatures bénévoles par édition
model EditionVolunteerApplication {
  id                Int             @id @default(autoincrement())
  editionId         Int
  userId            Int
  status            VolunteerStatus @default(PENDING)
  motivation        String?         @db.Text
  // Allergies (texte libre) si demandé pour l'édition
  allergies         String?         @db.Text
  createdAt         DateTime        @default(now())
  decidedAt         DateTime?
  // Snapshot téléphone au moment de la candidature pour conserver une trace même si l'utilisateur le change
  userSnapshotPhone String?
  // Préférence alimentaire déclarée au moment de la candidature
  dietaryPreference DietaryPreference @default(NONE)
  // Préférences horaires choisies (JSON array de créneaux)
  timePreferences   Json?
  edition           Edition         @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([editionId, userId])
  @@index([editionId])
  @@index([status])
}

model Feedback {
  id         Int          @id @default(autoincrement())
  type       FeedbackType
  subject    String
  message    String       @db.Text
  email      String? // Email pour les utilisateurs non connectés
  name       String? // Nom pour les utilisateurs non connectés
  userId     Int? // Utilisateur connecté (optionnel)
  userAgent  String? // Navigateur/OS pour debug
  url        String? // Page où le feedback a été soumis
  resolved   Boolean      @default(false)
  adminNotes String?      @db.Text
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId], map: "Feedback_userId_fkey")
  @@index([type], map: "Feedback_type_idx")
  @@index([resolved], map: "Feedback_resolved_idx")
}

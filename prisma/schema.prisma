generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                             @id @default(autoincrement())
  email                    String                          @unique
  pseudo                   String                          @unique
  nom                      String?
  prenom                   String?
  password                 String
  createdAt                DateTime                        @default(now())
  updatedAt                DateTime                        @updatedAt
  profilePicture           String?
  emailVerificationCode    String?
  isEmailVerified          Boolean                         @default(false)
  verificationCodeExpiry   DateTime?
  isGlobalAdmin            Boolean                         @default(false)
  phone                    String?
  carpoolBookings          CarpoolBooking[]
  carpoolComments          CarpoolComment[]
  carpoolOffers            CarpoolOffer[]
  carpoolPassengers        CarpoolPassenger[]
  carpoolRequests          CarpoolRequest[]
  carpoolRequestComments   CarpoolRequestComment[]
  permissionHistoryActions CollaboratorPermissionHistory[] @relation("CollaboratorPermissionHistory_actor")
  targetUserHistories      CollaboratorPermissionHistory[] @relation("CollaboratorPermissionHistory_target")
  createdConventions       Convention[]
  addedCollaborators       ConventionCollaborator[]        @relation("AddedCollaborators")
  collaborations           ConventionCollaborator[]
  createdEditions          Edition[]                       @relation("CreatedEditions")
  editionPosts             EditionPost[]
  editionPostComments      EditionPostComment[]
  volunteerApplications    EditionVolunteerApplication[]
  feedbacks                Feedback[]
  lostFoundComments        LostFoundComment[]
  lostFoundItems           LostFoundItem[]
  passwordResetTokens      PasswordResetToken[]
  favoriteEditions         Edition[]                       @relation("FavoriteEditions")
}

model Edition {
  id                           Int                             @id @default(autoincrement())
  name                         String?
  description                  String?                         @db.Text
  createdAt                    DateTime                        @default(now())
  updatedAt                    DateTime                        @updatedAt
  creatorId                    Int
  endDate                      DateTime
  startDate                    DateTime
  addressLine1                 String
  addressLine2                 String?
  city                         String
  country                      String
  postalCode                   String
  region                       String?
  latitude                     Float?
  longitude                    Float?
  facebookUrl                  String?
  instagramUrl                 String?
  ticketingUrl                 String?
  acceptsPets                  Boolean                         @default(false)
  hasFoodTrucks                Boolean                         @default(false)
  hasGym                       Boolean                         @default(false)
  hasKidsZone                  Boolean                         @default(false)
  hasTentCamping               Boolean                         @default(false)
  hasTruckCamping              Boolean                         @default(false)
  imageUrl                     String?
  hasAccessibility             Boolean                         @default(false)
  hasAerialSpace               Boolean                         @default(false)
  hasCantine                   Boolean                         @default(false)
  hasConcert                   Boolean                         @default(false)
  hasFamilyCamping             Boolean                         @default(false)
  hasFireSpace                 Boolean                         @default(false)
  hasGala                      Boolean                         @default(false)
  hasOpenStage                 Boolean                         @default(false)
  hasShowers                   Boolean                         @default(false)
  hasSlacklineSpace            Boolean                         @default(false)
  hasToilets                   Boolean                         @default(false)
  hasWorkshops                 Boolean                         @default(false)
  hasAfjTokenPayment           Boolean                         @default(false)
  hasCreditCardPayment         Boolean                         @default(false)
  conventionId                 Int
  hasATM                       Boolean                         @default(false)
  hasLongShow                  Boolean                         @default(false)
  isOnline                     Boolean                         @default(false)
  volunteersDescription        String?                         @db.Text
  volunteersOpen               Boolean                         @default(false)
  volunteersUpdatedAt          DateTime?
  volunteersExternalUrl        String?
  volunteersMode               VolunteerMode                   @default(INTERNAL)
  volunteersAskDiet            Boolean                         @default(false)
  volunteersAskAllergies       Boolean                         @default(false)
  officialWebsiteUrl           String?
  volunteersAskTimePreferences Boolean                         @default(false)
  volunteersTeams              Json?
  volunteersAskTeamPreferences Boolean                         @default(false)
  volunteersAskPets            Boolean                         @default(false)
  volunteersAskMinors          Boolean                         @default(false)
  volunteersAskVehicle         Boolean                         @default(false)
  volunteersAskCompanion       Boolean                         @default(false)
  volunteersAskAvoidList       Boolean                         @default(false)
  volunteersAskSkills          Boolean                         @default(false)
  volunteersAskExperience      Boolean                         @default(false)
  volunteersTeardownEndDate    DateTime?
  volunteersSetupStartDate     DateTime?
  volunteersAskSetup           Boolean                         @default(false)
  volunteersAskTeardown        Boolean                         @default(false)
  carpoolOffers                CarpoolOffer[]
  carpoolRequests              CarpoolRequest[]
  convention                   Convention                      @relation(fields: [conventionId], references: [id])
  creator                      User                            @relation("CreatedEditions", fields: [creatorId], references: [id])
  collaboratorPermissions      EditionCollaboratorPermission[]
  editionPosts                 EditionPost[]
  volunteerApplications        EditionVolunteerApplication[]
  lostFoundItems               LostFoundItem[]
  favoritedBy                  User[]                          @relation("FavoriteEditions")

  @@index([creatorId], map: "Edition_creatorId_fkey")
  @@index([conventionId], map: "Edition_conventionId_fkey")
}

model ConventionCollaborator {
  id                     Int                             @id @default(autoincrement())
  conventionId           Int
  userId                 Int
  addedAt                DateTime                        @default(now())
  addedById              Int
  canAddEdition          Boolean                         @default(false)
  canDeleteAllEditions   Boolean                         @default(false)
  canDeleteConvention    Boolean                         @default(false)
  canEditAllEditions     Boolean                         @default(false)
  canEditConvention      Boolean                         @default(false)
  canManageCollaborators Boolean                         @default(false)
  title                  String?
  canManageVolunteers    Boolean                         @default(false)
  addedBy                User                            @relation("AddedCollaborators", fields: [addedById], references: [id])
  convention             Convention                      @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  user                   User                            @relation(fields: [userId], references: [id], onDelete: Cascade)
  perEditionPermissions  EditionCollaboratorPermission[]

  @@unique([conventionId, userId])
  @@index([addedById], map: "ConventionCollaborator_addedById_fkey")
  @@index([userId], map: "ConventionCollaborator_userId_fkey")
}

model CarpoolOffer {
  id               Int                @id @default(autoincrement())
  userId           Int
  departureDate    DateTime
  departureCity    String
  departureAddress String
  availableSeats   Int
  description      String?            @db.Text
  phoneNumber      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  editionId        Int
  bookings         CarpoolBooking[]
  comments         CarpoolComment[]
  edition          Edition            @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  passengers       CarpoolPassenger[]

  @@index([editionId], map: "CarpoolOffer_editionId_fkey")
  @@index([userId], map: "CarpoolOffer_userId_fkey")
}

model CarpoolRequest {
  id            Int                     @id @default(autoincrement())
  userId        Int
  departureDate DateTime
  departureCity String
  seatsNeeded   Int                     @default(1)
  description   String?                 @db.Text
  phoneNumber   String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  editionId     Int
  bookings      CarpoolBooking[]
  edition       Edition                 @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user          User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      CarpoolRequestComment[]

  @@index([editionId], map: "CarpoolRequest_editionId_fkey")
  @@index([userId], map: "CarpoolRequest_userId_fkey")
}

model CarpoolComment {
  id             Int          @id @default(autoincrement())
  carpoolOfferId Int
  userId         Int
  content        String       @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  carpoolOffer   CarpoolOffer @relation(fields: [carpoolOfferId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([carpoolOfferId], map: "CarpoolComment_carpoolOfferId_fkey")
  @@index([userId], map: "CarpoolComment_userId_fkey")
}

model CarpoolRequestComment {
  id               Int            @id @default(autoincrement())
  carpoolRequestId Int
  userId           Int
  content          String         @db.Text
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  carpoolRequest   CarpoolRequest @relation(fields: [carpoolRequestId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([carpoolRequestId], map: "CarpoolRequestComment_carpoolRequestId_fkey")
  @@index([userId], map: "CarpoolRequestComment_userId_fkey")
}

model CarpoolPassenger {
  id             Int          @id @default(autoincrement())
  carpoolOfferId Int
  userId         Int
  addedAt        DateTime     @default(now())
  addedById      Int
  carpoolOffer   CarpoolOffer @relation(fields: [carpoolOfferId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([carpoolOfferId, userId])
  @@index([carpoolOfferId], map: "CarpoolPassenger_carpoolOfferId_fkey")
  @@index([userId], map: "CarpoolPassenger_userId_fkey")
}

model CarpoolBooking {
  id             Int             @id @default(autoincrement())
  carpoolOfferId Int
  requestId      Int?
  requesterId    Int
  seats          Int
  message        String?         @db.Text
  status         BookingStatus   @default(PENDING)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  carpoolOffer   CarpoolOffer    @relation(fields: [carpoolOfferId], references: [id], onDelete: Cascade)
  carpoolRequest CarpoolRequest? @relation(fields: [requestId], references: [id])
  requester      User            @relation(fields: [requesterId], references: [id], onDelete: Cascade)

  @@index([carpoolOfferId], map: "CarpoolBooking_carpoolOfferId_fkey")
  @@index([requesterId], map: "CarpoolBooking_requesterId_fkey")
  @@index([requestId], map: "CarpoolBooking_requestId_fkey")
}

model Convention {
  id                Int                             @id @default(autoincrement())
  name              String
  description       String?                         @db.Text
  logo              String?
  createdAt         DateTime                        @default(now())
  updatedAt         DateTime                        @updatedAt
  authorId          Int
  archivedAt        DateTime?
  isArchived        Boolean                         @default(false)
  permissionHistory CollaboratorPermissionHistory[]
  author            User                            @relation(fields: [authorId], references: [id])
  collaborators     ConventionCollaborator[]
  editions          Edition[]

  @@index([authorId], map: "Convention_authorId_fkey")
}

model EditionCollaboratorPermission {
  id                  Int                    @id @default(autoincrement())
  collaboratorId      Int
  editionId           Int
  canEdit             Boolean                @default(false)
  canDelete           Boolean                @default(false)
  canManageVolunteers Boolean                @default(false)
  collaborator        ConventionCollaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  edition             Edition                @relation(fields: [editionId], references: [id], onDelete: Cascade)

  @@unique([collaboratorId, editionId])
  @@index([editionId])
}

model CollaboratorPermissionHistory {
  id           Int                              @id @default(autoincrement())
  conventionId Int
  actorId      Int
  changeType   CollaboratorPermissionChangeType
  before       Json?
  after        Json?
  createdAt    DateTime                         @default(now())
  targetUserId Int?
  actor        User                             @relation("CollaboratorPermissionHistory_actor", fields: [actorId], references: [id], onDelete: Cascade)
  convention   Convention                       @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  targetUser   User?                            @relation("CollaboratorPermissionHistory_target", fields: [targetUserId], references: [id])

  @@index([conventionId])
  @@index([actorId])
  @@index([changeType])
  @@index([targetUserId])
}

model EditionPost {
  id        Int                  @id @default(autoincrement())
  editionId Int
  userId    Int
  content   String               @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  edition   Edition              @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  EditionPostComment[]

  @@index([editionId], map: "EditionPost_editionId_fkey")
  @@index([userId], map: "EditionPost_userId_fkey")
}

model EditionPostComment {
  id            Int         @id @default(autoincrement())
  editionPostId Int
  userId        Int
  content       String      @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  editionPost   EditionPost @relation(fields: [editionPostId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([editionPostId], map: "EditionPostComment_editionPostId_fkey")
  @@index([userId], map: "EditionPostComment_userId_fkey")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "PasswordResetToken_userId_fkey")
  @@index([token])
}

model LostFoundItem {
  id          Int                @id @default(autoincrement())
  editionId   Int
  userId      Int
  description String             @db.Text
  imageUrl    String?
  status      LostFoundStatus    @default(LOST)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  comments    LostFoundComment[]
  edition     Edition            @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([editionId], map: "LostFoundItem_editionId_fkey")
  @@index([userId], map: "LostFoundItem_userId_fkey")
}

model LostFoundComment {
  id              Int           @id @default(autoincrement())
  lostFoundItemId Int
  userId          Int
  content         String        @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  lostFoundItem   LostFoundItem @relation(fields: [lostFoundItemId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lostFoundItemId], map: "LostFoundComment_lostFoundItemId_fkey")
  @@index([userId], map: "LostFoundComment_userId_fkey")
}

model EditionVolunteerApplication {
  id                   Int               @id @default(autoincrement())
  editionId            Int
  userId               Int
  status               VolunteerStatus   @default(PENDING)
  motivation           String?           @db.Text
  allergies            String?           @db.Text
  createdAt            DateTime          @default(now())
  decidedAt            DateTime?
  userSnapshotPhone    String?
  dietaryPreference    DietaryPreference @default(NONE)
  timePreferences      Json?
  teamPreferences      Json?
  hasPets              Boolean?
  petsDetails          String?           @db.Text
  hasMinors            Boolean?
  minorsDetails        String?           @db.Text
  hasVehicle           Boolean?
  vehicleDetails       String?           @db.Text
  companionName        String?           @db.Text
  avoidList            String?           @db.Text
  skills               String?           @db.Text
  hasExperience        Boolean?
  experienceDetails    String?           @db.Text
  setupAvailability    Boolean?
  teardownAvailability Boolean?
  eventAvailability    Boolean?
  arrivalDateTime      String?
  departureDateTime    String?
  edition              Edition           @relation(fields: [editionId], references: [id], onDelete: Cascade)
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([editionId, userId])
  @@index([editionId])
  @@index([status])
  @@index([userId], map: "EditionVolunteerApplication_userId_fkey")
}

model Feedback {
  id         Int          @id @default(autoincrement())
  type       FeedbackType
  subject    String
  message    String       @db.Text
  email      String?
  name       String?
  userId     Int?
  userAgent  String?
  url        String?
  resolved   Boolean      @default(false)
  adminNotes String?      @db.Text
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User?        @relation(fields: [userId], references: [id])

  @@index([userId], map: "Feedback_userId_fkey")
  @@index([type])
  @@index([resolved])
}

enum CollaboratorPermissionChangeType {
  CREATED
  RIGHTS_UPDATED
  PER_EDITIONS_UPDATED
  ARCHIVED
  UNARCHIVED
  REMOVED
}

enum VolunteerMode {
  INTERNAL
  EXTERNAL
}

enum DietaryPreference {
  NONE
  VEGETARIAN
  VEGAN
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum LostFoundStatus {
  LOST
  RETURNED
}

enum FeedbackType {
  BUG
  SUGGESTION
  GENERAL
  COMPLAINT
}

enum VolunteerStatus {
  PENDING
  ACCEPTED
  REJECTED
}

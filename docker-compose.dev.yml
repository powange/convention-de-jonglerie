# Docker Compose pour Convention de Jonglerie (développement iso release)
services:
  # Base de données MySQL
  database:
    image: mysql:8.0
    container_name: convention-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-convention_db}
      MYSQL_USER: ${MYSQL_USER:-convention_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-convention_password}
    ports:
      - '3306:3306'
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost', '--silent']
      timeout: 2s
      interval: 3s
      retries: 15
      start_period: 5s

  # Application Nuxt.js (mode développement)
  app:
    build:
      context: .
      target: dev
      args:
        BASE_NODE_IMAGE: ${BASE_NODE_IMAGE-node:22-slim}
    container_name: convention-app-dev
    working_dir: /app
    # Exécuter les migrations Prisma (idempotent) puis démarrer Nuxt en mode dev.
    # Optimisé pour réduire les temps de démarrage
    command: sh -lc "echo 'Starting app initialization...' && npx prisma generate && npx prisma migrate deploy && echo 'Ready! Starting Nuxt...' && npm run dev"
    environment:
      DATABASE_URL: 'mysql://${MYSQL_USER:-convention_user}:${MYSQL_PASSWORD:-convention_password}@database:3306/${MYSQL_DATABASE:-convention_db}'
      NUXT_HOST: '0.0.0.0'
      NUXT_PORT: '3000'
      NODE_ENV: 'development'
      NUXT_APP_BASE_URL: '${NUXT_APP_BASE_URL:-http://localhost:3000}'
      # Secret de session requis par nuxt-auth-utils (32+ caractères)
      # Remplacez via un fichier .env local: NUXT_SESSION_PASSWORD=...
      NUXT_SESSION_PASSWORD: '${NUXT_SESSION_PASSWORD:-dev_session_password_change_me_at_least_32_chars}'
      SEND_EMAILS: '${SEND_EMAILS:-false}'
      SMTP_USER: '${SMTP_USER:-}'
      SMTP_PASS: '${SMTP_PASS:-}'
      # Google OAuth
      NUXT_OAUTH_GOOGLE_CLIENT_ID: '${NUXT_OAUTH_GOOGLE_CLIENT_ID:-}'
      NUXT_OAUTH_GOOGLE_CLIENT_SECRET: '${NUXT_OAUTH_GOOGLE_CLIENT_SECRET:-}'
      # Optionnel si vous avez une URL publique
      NUXT_OAUTH_GOOGLE_REDIRECT_URL: '${NUXT_OAUTH_GOOGLE_REDIRECT_URL:-}'
      # Facebook OAuth
      NUXT_OAUTH_FACEBOOK_CLIENT_ID: '${NUXT_OAUTH_FACEBOOK_CLIENT_ID:-}'
      NUXT_OAUTH_FACEBOOK_CLIENT_SECRET: '${NUXT_OAUTH_FACEBOOK_CLIENT_SECRET:-}'
      NUXT_OAUTH_FACEBOOK_REDIRECT_URL: '${NUXT_OAUTH_FACEBOOK_REDIRECT_URL:-}'
      # Exposition Nuxt (public/secret) basée sur les mêmes valeurs
      NUXT_PUBLIC_RECAPTCHA_SITE_KEY: '${NUXT_PUBLIC_RECAPTCHA_SITE_KEY}'
      NUXT_RECAPTCHA_SECRET_KEY: '${NUXT_RECAPTCHA_SECRET_KEY}'
      # Configuration nuxt-file-storage
      NUXT_FILE_STORAGE_MOUNT: '${NUXT_FILE_STORAGE_MOUNT:-/uploads}'
      # Configuration VAPID pour notifications push
      NUXT_PUBLIC_VAPID_PUBLIC_KEY: '${NUXT_PUBLIC_VAPID_PUBLIC_KEY:-}'
      VAPID_PRIVATE_KEY: '${VAPID_PRIVATE_KEY:-}'
      VAPID_SUBJECT: '${VAPID_SUBJECT:-}'
      ENABLE_CRON: '${ENABLE_CRON:-true}'
      # Force le polling pour Windows
      CHOKIDAR_USEPOLLING: 'true'
      CHOKIDAR_INTERVAL: '1000'
      # Pour le chiffrement des données sensibles (ex: cartes bancaires)
      ENCRYPTION_SECRET: '${ENCRYPTION_SECRET:-change-this-to-a-strong-random-secret-key-min-32-chars}'
      ENCRYPTION_SALT: '${ENCRYPTION_SALT:-change-this-salt-to-random-value}'
      # URL de l'API HelloAsso (par défaut: https://api.helloasso.com)
      HELLOASSO_API_URL: '${HELLOASSO_API_URL:-https://api.helloasso.com}'
    volumes:
      # Monter uniquement le code pour ne pas écraser node_modules
      - ./app:/app/app:cached
      - ./i18n:/app/i18n:cached
      - ./server:/app/server:cached
      - ./test:/app/test:cached
      - ./scripts:/app/scripts:cached
      - ./prisma:/app/prisma:cached
      - ./public:/app/public:cached
      - ./backups:/app/backups:cached
      # Persister les uploads comme en release (évite d'écraser en rebuild)
      - uploads_data:/app/public/uploads
      - uploads:/uploads
      - ./nuxt.config.ts:/app/nuxt.config.ts:cached
      # Caches/deps persistants côté Docker
      - ./node_modules:/app/node_modules
      - ./.nuxt:/app/.nuxt
      - ./.output:/app/.output
    ports:
      - '3000:3000'
      - '24678:24678'
    depends_on:
      database:
        condition: service_healthy

  # Interface d'administration base de données
  # adminer:
  #   image: adminer:latest
  #   container_name: convention-adminer
  #   restart: unless-stopped
  #   ports:
  #     - '8080:8080'
  #   environment:
  #     ADMINER_DEFAULT_SERVER: database
  #   depends_on:
  #     - database

volumes:
  mysql_data:
    driver: local
  uploads_data:
    driver: local
  uploads:
    driver: local

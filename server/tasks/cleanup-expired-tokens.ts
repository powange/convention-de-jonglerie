import { prisma } from '../utils/prisma'

export default defineTask({
  meta: {
    name: 'cleanup-expired-tokens',
    description: 'Clean up expired authentication tokens',
  },
  async run({ payload }) {
    console.log('üóëÔ∏è Ex√©cution de la t√¢che: nettoyage des tokens expir√©s')

    try {
      const now = new Date()

      // Nettoyer les tokens de r√©initialisation de mot de passe expir√©s
      const expiredPasswordTokens = await prisma.passwordResetToken.deleteMany({
        where: {
          OR: [
            {
              expiresAt: {
                lt: now,
              },
            },
            {
              used: true,
              createdAt: {
                lt: new Date(now.getTime() - 24 * 60 * 60 * 1000), // Utilis√©s depuis plus de 24h
              },
            },
          ],
        },
      })

      console.log(`üóëÔ∏è Supprim√© ${expiredPasswordTokens.count} tokens de r√©initialisation de mot de passe expir√©s`)

      // Nettoyer les anciennes sessions (si vous en avez dans votre base de donn√©es)
      // Note: Nuxt Auth Utils utilise des cookies sign√©s, donc pas forc√©ment stock√©s en DB
      // Cette section est optionnelle selon votre impl√©mentation

      // Statistiques de nettoyage
      const totalCleaned = expiredPasswordTokens.count

      if (totalCleaned > 0) {
        console.log(`‚úÖ T√¢che termin√©e: ${totalCleaned} tokens expir√©s supprim√©s`)
      } else {
        console.log('‚úÖ T√¢che termin√©e: aucun token expir√© √† nettoyer')
      }

      return {
        success: true,
        passwordResetTokensCleaned: expiredPasswordTokens.count,
        totalCleaned,
        timestamp: new Date().toISOString(),
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du nettoyage des tokens expir√©s:', error)
      throw error
    }
  },
})
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Configuration
const BATCH_SIZE = 3;
const DELAY_BETWEEN_REQUESTS = 1500; // 1.5 secondes entre chaque requ√™te

// Service de g√©ocodage avec fallback
async function geocodeWithFallback(addressLine1, city, postalCode, country, addressLine2) {
  // Premi√®re tentative avec l'adresse compl√®te
  console.log('   üéØ Tentative avec adresse compl√®te...');
  let result = await geocodeAddress(addressLine1, city, postalCode, country, addressLine2);
  
  if (result) {
    console.log('   ‚úÖ Trouv√© avec adresse compl√®te');
    return result;
  }

  // Pause entre les tentatives pour respecter l'API
  await new Promise(resolve => setTimeout(resolve, 800));

  // Deuxi√®me tentative avec seulement ville, code postal et pays
  console.log('   üîÑ Fallback avec ville, code postal et pays...');
  result = await geocodeSimpleAddress(city, postalCode, country);
  
  if (result) {
    console.log('   ‚úÖ Trouv√© avec adresse simplifi√©e');
    return result;
  }

  console.log('   ‚ùå Aucun r√©sultat trouv√©');
  return null;
}

// Service de g√©ocodage avec adresse compl√®te
async function geocodeAddress(addressLine1, city, postalCode, country, addressLine2) {
  try {
    // Construire l'adresse compl√®te
    const addressParts = [addressLine1];
    if (addressLine2) {
      addressParts.push(addressLine2);
    }
    addressParts.push(city, postalCode, country);
    const fullAddress = addressParts.join(', ');

    return await makeGeocodingRequest(fullAddress);

  } catch (error) {
    console.error('Erreur g√©ocodage adresse compl√®te:', error.message);
    return null;
  }
}

// Service de g√©ocodage avec adresse simplifi√©e (ville, code postal, pays)
async function geocodeSimpleAddress(city, postalCode, country) {
  try {
    // Construire l'adresse simplifi√©e
    const simpleAddress = [city, postalCode, country].join(', ');

    return await makeGeocodingRequest(simpleAddress);

  } catch (error) {
    console.error('Erreur g√©ocodage adresse simplifi√©e:', error.message);
    return null;
  }
}

// Fonction commune pour faire la requ√™te de g√©ocodage
async function makeGeocodingRequest(address) {
  const encodedAddress = encodeURIComponent(address);
  const url = `https://nominatim.openstreetmap.org/search?format=json&addressdetails=1&limit=1&q=${encodedAddress}`;
  
  const response = await fetch(url, {
    headers: {
      'User-Agent': 'Convention-de-Jonglerie-App/1.0'
    }
  });

  if (!response.ok) {
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }

  const data = await response.json();
  
  if (!data || data.length === 0) {
    return null;
  }

  const result = data[0];
  return {
    latitude: parseFloat(result.lat),
    longitude: parseFloat(result.lon)
  };
}

async function main() {
  console.log('üó∫Ô∏è  Script de g√©ocodage des √©ditions');
  
  try {
    // R√©cup√©rer les √©ditions sans coordonn√©es
    const editions = await prisma.edition.findMany({
      where: {
        OR: [
          { latitude: null },
          { longitude: null }
        ]
      },
      select: {
        id: true,
        name: true,
        addressLine1: true,
        addressLine2: true,
        city: true,
        postalCode: true,
        country: true
      }
    });

    console.log(`üìç ${editions.length} √©ditions √† g√©ocoder`);

    if (editions.length === 0) {
      console.log('‚úÖ Toutes les √©ditions ont d√©j√† des coordonn√©es !');
      return;
    }

    let processed = 0;
    let success = 0;
    let errors = 0;

    for (const edition of editions) {
      processed++;
      console.log(`\n[${processed}/${editions.length}] üîç ${edition.name || 'Sans nom'} (${edition.city})`);
      
      try {
        const coords = await geocodeWithFallback(
          edition.addressLine1,
          edition.city,
          edition.postalCode,
          edition.country,
          edition.addressLine2
        );

        if (coords) {
          await prisma.edition.update({
            where: { id: edition.id },
            data: {
              latitude: coords.latitude,
              longitude: coords.longitude
            }
          });
          
          console.log(`   ‚úÖ ${coords.latitude.toFixed(4)}, ${coords.longitude.toFixed(4)}`);
          success++;
        } else {
          console.log(`   ‚ùå Aucune coordonn√©e trouv√©e`);
          errors++;
        }

      } catch (error) {
        console.log(`   üí• Erreur: ${error.message}`);
        errors++;
      }

      // Pause entre les requ√™tes
      if (processed < editions.length) {
        console.log(`   ‚è≥ Pause ${DELAY_BETWEEN_REQUESTS}ms...`);
        await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_REQUESTS));
      }
    }

    console.log(`\nüéØ R√âSULTATS:`);
    console.log(`   ‚úÖ Succ√®s: ${success}`);
    console.log(`   ‚ùå Erreurs: ${errors}`);
    console.log(`   üìä Total: ${processed}`);
    console.log(`   üìà Taux de succ√®s: ${Math.round(success/processed*100)}%`);

  } catch (error) {
    console.error('üí• Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter
main()
  .then(() => {
    console.log('\nüéâ Termin√© !');
    process.exit(0);
  })
  .catch(error => {
    console.error('üí• Erreur fatale:', error);
    process.exit(1);
  });
#!/usr/bin/env tsx
import { spawn } from 'node:child_process'

import bcrypt from 'bcryptjs'

import { prisma } from '../server/utils/prisma'

// Fonction utilitaire pour g√©n√©rer des dates al√©atoires
function getRandomDate(daysFromNow: number, variationDays: number): Date {
  const baseDate = new Date()
  baseDate.setDate(baseDate.getDate() + daysFromNow)
  const variation = Math.floor(Math.random() * variationDays * 2) - variationDays
  baseDate.setDate(baseDate.getDate() + variation)
  return baseDate
}

// Fonction utilitaire pour g√©n√©rer du contenu al√©atoire
function getRandomComment(): string {
  const comments = [
    "Super √©v√©nement ! J'ai h√¢te d'y √™tre ü§π‚Äç‚ôÇÔ∏è",
    "Quelqu'un sait s'il y aura des ateliers de diabolo ?",
    "C'√©tait g√©nial l'ann√©e derni√®re, je recommande !",
    'Des infos sur le camping ?',
    'Premi√®re fois que je viens, des conseils ?',
    "L'ambiance est toujours au top dans cette convention !",
    "J'esp√®re qu'il y aura de la bonne musique cette ann√©e",
    'Qui am√®ne des massues √† √©changer ?',
    'Les enfants sont-ils les bienvenus ?',
    'Y a-t-il des spectacles pr√©vus le soir ?',
  ]
  return comments[Math.floor(Math.random() * comments.length)]
}

async function main() {
  console.log('D√©marrage du seed dev...')

  const args = process.argv.slice(2)
  const doReset = args.includes('--reset') || args.includes('--clear')
  if (doReset) {
    console.log('‚ö†Ô∏è  Option --reset: ex√©cution de prisma migrate reset (DEV uniquement).')
    await new Promise<void>((resolve, reject) => {
      const proc = spawn(
        'npx',
        ['prisma', 'migrate', 'reset', '--force', '--skip-generate', '--skip-seed'],
        {
          stdio: 'inherit',
          env: process.env,
        }
      )
      proc.on('exit', (code) => {
        if (code === 0) resolve()
        else reject(new Error(`prisma migrate reset exited with code ${code}`))
      })
      proc.on('error', reject)
    })
    console.log('‚úÖ Reset Prisma termin√©, insertion des donn√©es de seed...')
  }

  // Cr√©er / r√©cup√©rer un user seed qui sera auteur des conventions/√©ditions
  const adminEmail = process.env.SEED_ADMIN_EMAIL || 'seed-admin@example.com'
  const adminPseudo = process.env.SEED_ADMIN_PSEUDO || 'seedadmin'
  const adminPassword = process.env.SEED_ADMIN_PASSWORD || 'devpass'

  const passwordHash = await bcrypt.hash(adminPassword, 10)

  let user = await prisma.user.findUnique({ where: { email: adminEmail } })
  if (!user) {
    user = await prisma.user.create({
      data: {
        email: adminEmail,
        pseudo: adminPseudo,
        nom: 'Seed',
        prenom: 'Admin',
        password: passwordHash,
        isEmailVerified: true,
      },
    })
    console.log(`User cr√©√©: ${user.email} (id=${user.id})`)
  } else {
    console.log(`User existant: ${user.email} (id=${user.id})`)
  }

  // Cr√©er un superadmin
  const superAdminEmail = 'powange@gmail.com'
  const superAdminPassword = process.env.SUPERADMIN_PASSWORD || 'superadmin123'

  let superAdmin = await prisma.user.findUnique({ where: { email: superAdminEmail } })
  if (!superAdmin) {
    superAdmin = await prisma.user.create({
      data: {
        email: superAdminEmail,
        pseudo: 'SuperAdmin',
        nom: 'Powange',
        prenom: 'Admin',
        password: await bcrypt.hash(superAdminPassword, 10),
        isEmailVerified: true,
        isGlobalAdmin: true,
      },
    })
    console.log(`SuperAdmin cr√©√©: ${superAdmin.email} (id=${superAdmin.id})`)
  } else {
    console.log(`SuperAdmin existant: ${superAdmin.email} (id=${superAdmin.id})`)
  }

  // Cr√©er un utilisateur powange non-admin
  const powangeUserEmail = 'powange@hotmail.com'
  const powangeUserPassword = process.env.POWANGE_PASSWORD || 'powange123'

  let powangeUser = await prisma.user.findUnique({ where: { email: powangeUserEmail } })
  if (!powangeUser) {
    powangeUser = await prisma.user.create({
      data: {
        email: powangeUserEmail,
        pseudo: 'Powange',
        nom: 'Powange',
        prenom: 'User',
        password: await bcrypt.hash(powangeUserPassword, 10),
        isEmailVerified: true,
        isGlobalAdmin: false,
      },
    })
    console.log(`Utilisateur Powange cr√©√©: ${powangeUser.email} (id=${powangeUser.id})`)
  } else {
    console.log(`Utilisateur Powange existant: ${powangeUser.email} (id=${powangeUser.id})`)
  }

  // Cr√©er des utilisateurs de test
  const testUsers = [
    { email: 'alice.jongleuse@example.com', pseudo: 'AliceJongle', nom: 'Dubois', prenom: 'Alice' },
    { email: 'bob.cirque@example.com', pseudo: 'BobCircus', nom: 'Martin', prenom: 'Bob' },
    {
      email: 'charlie.diabolo@example.com',
      pseudo: 'CharlieDiab',
      nom: 'Rousseau',
      prenom: 'Charlie',
    },
    { email: 'diana.massues@example.com', pseudo: 'DianaMassues', nom: 'Lefevre', prenom: 'Diana' },
    { email: 'eve.contact@example.com', pseudo: 'EveContact', nom: 'Moreau', prenom: 'Eve' },
  ]

  const createdUsers = [user, superAdmin, powangeUser] // Inclure l'admin, le superadmin et powange

  for (const userData of testUsers) {
    let testUser = await prisma.user.findUnique({ where: { email: userData.email } })
    if (!testUser) {
      testUser = await prisma.user.create({
        data: {
          ...userData,
          password: await bcrypt.hash('testpass', 10),
          isEmailVerified: true,
        },
      })
      console.log(`Utilisateur de test cr√©√©: ${testUser.email} (id=${testUser.id})`)
    } else {
      console.log(`Utilisateur de test existant: ${testUser.email} (id=${testUser.id})`)
    }
    createdUsers.push(testUser)
  }

  // D√©finitions de conventions √† ins√©rer
  const conventions = [
    {
      name: 'Convention Nationale de Jonglerie',
      description: 'Rassemblement national des jongleurs.',
      authorId: user.id,
    },
    {
      name: 'Festival Jongle & Cirque',
      description: 'Festival convivial avec sc√®nes et ateliers.',
      authorId: superAdmin.id,
    },
    {
      name: 'Convention R√©gionale de Jonglerie',
      description: 'Edition r√©gionale, ambiance locale.',
      authorId: user.id,
    },
    {
      name: 'Festival International du Cirque',
      description: 'Grand rendez-vous des artistes du monde entier.',
      authorId: superAdmin.id,
    },
  ]

  const createdEditions: any[] = []

  for (const convDef of conventions) {
    let conv = await prisma.convention.findFirst({ where: { name: convDef.name } })
    if (!conv) {
      conv = await prisma.convention.create({
        data: {
          name: convDef.name,
          description: convDef.description,
          authorId: convDef.authorId,
        },
      })
      console.log(`Convention cr√©√©e: ${conv.name} (id=${conv.id})`)

      // Ajouter automatiquement l'auteur comme collaborateur ADMINISTRATOR
      await prisma.conventionCollaborator.create({
        data: {
          conventionId: conv.id,
          userId: convDef.authorId,
          addedById: convDef.authorId,
          title: 'Organisateur',
          canEditConvention: true,
          canDeleteConvention: true,
          canManageCollaborators: true,
          canAddEdition: true,
          canEditAllEditions: true,
          canDeleteAllEditions: true,
        },
      })
      console.log(`  ‚Üí Auteur ajout√© comme collaborateur ADMINISTRATOR`)
    } else {
      console.log(`Convention existante: ${conv.name} (id=${conv.id})`)

      // V√©rifier si l'auteur est d√©j√† collaborateur, sinon l'ajouter
      const existingCollab = await prisma.conventionCollaborator.findFirst({
        where: {
          conventionId: conv.id,
          userId: conv.authorId,
        },
      })

      if (!existingCollab) {
        await prisma.conventionCollaborator.create({
          data: {
            conventionId: conv.id,
            userId: conv.authorId,
            addedById: conv.authorId,
            title: 'Organisateur',
            canEditConvention: true,
            canDeleteConvention: true,
            canManageCollaborators: true,
            canAddEdition: true,
            canEditAllEditions: true,
            canDeleteAllEditions: true,
          },
        })
        console.log(`  ‚Üí Auteur ajout√© comme collaborateur ADMINISTRATOR`)
      }
    }

    // Ajouter des collaborateurs suppl√©mentaires pour certaines conventions
    // Pour rendre la base de donn√©es plus r√©aliste
    if (Math.random() > 0.5) {
      const numCollaborators = Math.floor(Math.random() * 3) + 1 // 1-3 collaborateurs
      const availableUsers = createdUsers.filter((u) => u.id !== conv.authorId)

      for (let j = 0; j < Math.min(numCollaborators, availableUsers.length); j++) {
        const randomUser = availableUsers[Math.floor(Math.random() * availableUsers.length)]

        // V√©rifier si cet utilisateur n'est pas d√©j√† collaborateur
        const existingCollab = await prisma.conventionCollaborator.findFirst({
          where: {
            conventionId: conv.id,
            userId: randomUser.id,
          },
        })

        if (!existingCollab) {
          const role = Math.random() > 0.6 ? 'ADMINISTRATOR' : 'MODERATOR'
          await prisma.conventionCollaborator.create({
            data: {
              conventionId: conv.id,
              userId: randomUser.id,
              addedById: conv.authorId,
              title: role === 'ADMINISTRATOR' ? 'Co-organisateur' : undefined,
              // Mapping r√¥le -> nouveaux droits
              // NOTE: legacy mapping bas√© sur role (ADMINISTRATOR/MODERATOR) conserv√© uniquement pour seed local.
              canEditConvention: role === 'ADMINISTRATOR',
              canDeleteConvention: role === 'ADMINISTRATOR',
              canManageCollaborators: role === 'ADMINISTRATOR',
              canAddEdition: true, // MODERATOR et ADMIN peuvent ajouter
              canEditAllEditions: true, // les deux peuvent √©diter toutes les √©ditions
              canDeleteAllEditions: true, // per spec: MODERATOR => canDeleteAllEditions true
            },
          })
          console.log(`  ‚Üí Collaborateur ajout√©: ${randomUser.pseudo} (${role})`)
        }
      }
    }

    // Cr√©er 4 √©ditions par convention avec des dates vari√©es (pass√©es, pr√©sentes, futures)
    const cities = ['Paris', 'Lyon', 'Marseille', 'Toulouse', 'Bordeaux', 'Nantes', 'Strasbourg']

    for (let i = 1; i <= 4; i++) {
      const editionName = `${conv.name} ‚Äî √âdition ${i}`
      let edition = await prisma.edition.findFirst({
        where: { name: editionName, conventionId: conv.id },
      })
      if (!edition) {
        let startDate: Date

        // R√©partir les √©ditions : pass√©es, en cours, futures proches
        if (i === 1) {
          // √âdition pass√©e r√©cente (il y a 2-8 semaines)
          startDate = getRandomDate(-35, 20) // Entre -55 et -15 jours
        } else if (i === 2) {
          // √âdition en cours ou tr√®s r√©cente (il y a 1 semaine √† dans 1 semaine)
          startDate = getRandomDate(-3, 10) // Entre -13 et 7 jours
        } else if (i === 3) {
          // √âdition future proche (dans 2-6 semaines)
          startDate = getRandomDate(21, 14) // Entre 7 et 35 jours
        } else {
          // √âdition future (dans 2-4 mois)
          startDate = getRandomDate(75, 30) // Entre 45 et 105 jours
        }

        const endDate = new Date(startDate)
        // √âditions de 3 √† 6 jours (typique pour les conventions de jonglerie)
        endDate.setDate(startDate.getDate() + Math.floor(Math.random() * 4) + 3) // 3-6 jours

        const randomCity = cities[Math.floor(Math.random() * cities.length)]

        edition = await prisma.edition.create({
          data: {
            name: editionName,
            description: `${conv.name} ‚Äî √©dition ${i}`,
            creatorId: conv.authorId,
            conventionId: conv.id,
            startDate,
            endDate,
            addressLine1: `${Math.floor(Math.random() * 100) + 1} Rue de la Jonglerie`,
            city: randomCity,
            country: 'France',
            postalCode: `${Math.floor(Math.random() * 90000) + 10000}`,
            hasWorkshops: Math.random() > 0.3,
            hasConcert: Math.random() > 0.5,
            hasTentCamping: Math.random() > 0.4,
            hasShowers: Math.random() > 0.2,
            hasToilets: Math.random() > 0.1,
            hasCantine: Math.random() > 0.6,
            isOnline: true,
          },
        })
        console.log(
          `Edition cr√©√©e: ${edition.name} (id=${edition.id}, ${startDate.toLocaleDateString()})`
        )
        createdEditions.push(edition)
      } else {
        console.log(`Edition existante: ${edition.name} (id=${edition.id})`)
        createdEditions.push(edition)
      }
    }

    // Exemple: ajouter quelques permissions sp√©cifiques par √©dition pour le premier collaborateur non-auteur si pr√©sent
    const extraCollaborators = await prisma.conventionCollaborator.findMany({
      where: { conventionId: conv.id, userId: { not: conv.authorId } },
      take: 1,
      orderBy: { addedAt: 'asc' },
    })
    if (extraCollaborators.length && createdEditions.length) {
      const targetCollab = extraCollaborators[0]
      // S√©lectionner 1 √† 2 √©ditions pour des droits sp√©cifiques si pas d√©j√† globalement admin
      const editionSample = createdEditions.filter((e) => e.conventionId === conv.id).slice(0, 2)
      for (const ed of editionSample) {
        await prisma.editionCollaboratorPermission.upsert({
          where: {
            collaboratorId_editionId: { collaboratorId: targetCollab.id, editionId: ed.id },
          },
          create: {
            collaboratorId: targetCollab.id,
            editionId: ed.id,
            canEdit: true,
            canDelete: false,
          },
          update: {},
        })
      }
    }
  }

  // Ajouter des posts (commentaires) sur les √©ditions
  console.log('Ajout des posts sur les √©ditions...')
  for (const edition of createdEditions) {
    const numPosts = Math.floor(Math.random() * 5) + 1 // 1-5 posts par √©dition

    for (let i = 0; i < numPosts; i++) {
      const randomUser = createdUsers[Math.floor(Math.random() * createdUsers.length)]

      const existingPost = await prisma.editionPost.findFirst({
        where: {
          editionId: edition.id,
          userId: randomUser.id,
        },
      })

      if (!existingPost) {
        const post = await prisma.editionPost.create({
          data: {
            editionId: edition.id,
            userId: randomUser.id,
            content: getRandomComment(),
          },
        })

        // Ajouter parfois des commentaires sur les posts
        if (Math.random() > 0.6) {
          const numComments = Math.floor(Math.random() * 3) + 1
          for (let j = 0; j < numComments; j++) {
            const commentUser = createdUsers[Math.floor(Math.random() * createdUsers.length)]
            await prisma.editionPostComment.create({
              data: {
                editionPostId: post.id,
                userId: commentUser.id,
                content: getRandomComment(),
              },
            })
          }
        }
      }
    }
  }

  // Ajouter des propositions de covoiturage
  console.log('Ajout des propositions de covoiturage...')
  const departureCities = [
    'Paris',
    'Lyon',
    'Marseille',
    'Toulouse',
    'Bordeaux',
    'Lille',
    'Nice',
    'Nantes',
  ]

  for (const edition of createdEditions) {
    const numOffers = Math.floor(Math.random() * 4) + 1 // 1-4 offres par √©dition

    for (let i = 0; i < numOffers; i++) {
      // S'assurer que le superadmin cr√©e au moins une offre par √©dition (la premi√®re)
      const randomUser =
        i === 0 ? superAdmin : createdUsers[Math.floor(Math.random() * createdUsers.length)]
      const departureCity = departureCities[Math.floor(Math.random() * departureCities.length)]

      // Date de d√©part 1-2 jours avant le d√©but de l'√©dition
      const departureDate = new Date(edition.startDate)
      departureDate.setDate(departureDate.getDate() - Math.floor(Math.random() * 2) - 1)

      const offer = await prisma.carpoolOffer.create({
        data: {
          userId: randomUser.id,
          editionId: edition.id,
          departureDate,
          departureCity,
          departureAddress: `${Math.floor(Math.random() * 100) + 1} Avenue de la Gare, ${departureCity}`,
          availableSeats: Math.floor(Math.random() * 4) + 1, // 1-4 places
          description: `Covoiturage au d√©part de ${departureCity}. Ambiance conviviale garantie ! Place pour mat√©riel de jonglerie.`,
          phoneNumber: `06${Math.floor(Math.random() * 90000000) + 10000000}`,
        },
      })

      // Ajouter des commentaires sur certaines offres de covoiturage
      if (Math.random() > 0.5) {
        const numComments = Math.floor(Math.random() * 3) + 1
        for (let j = 0; j < numComments; j++) {
          const commentUser = createdUsers[Math.floor(Math.random() * createdUsers.length)]
          if (commentUser.id !== randomUser.id) {
            // Pas de commentaire de l'auteur sur sa propre offre
            await prisma.carpoolComment.create({
              data: {
                carpoolOfferId: offer.id,
                userId: commentUser.id,
                content: [
                  'Est-ce que tu peux passer par Orl√©ans ?',
                  'Super ! Je suis int√©ress√©(e)',
                  '√Ä quelle heure exactement ?',
                  'Y a-t-il de la place pour mes massues ?',
                  'Merci pour la proposition !',
                  'Possible de faire un d√©tour ?',
                  "Je peux participer aux frais d'essence",
                ][Math.floor(Math.random() * 7)],
              },
            })
          }
        }
      }
    }

    // Ajouter aussi quelques demandes de covoiturage
    const numRequests = Math.floor(Math.random() * 3) + 1 // 1-3 demandes par √©dition

    for (let i = 0; i < numRequests; i++) {
      // Le superadmin cr√©e parfois des demandes aussi (30% de chance)
      const randomUser =
        Math.random() < 0.3
          ? superAdmin
          : createdUsers[Math.floor(Math.random() * createdUsers.length)]
      const departureCity = departureCities[Math.floor(Math.random() * departureCities.length)]

      const departureDate = new Date(edition.startDate)
      departureDate.setDate(departureDate.getDate() - Math.floor(Math.random() * 2) - 1)

      const request = await prisma.carpoolRequest.create({
        data: {
          userId: randomUser.id,
          editionId: edition.id,
          departureDate,
          departureCity,
          seatsNeeded: Math.floor(Math.random() * 2) + 1, // 1-2 places
          description: `Recherche covoiturage depuis ${departureCity}. Flexible sur l'horaire !`,
          phoneNumber:
            Math.random() > 0.5 ? `06${Math.floor(Math.random() * 90000000) + 10000000}` : null,
        },
      })

      // Commentaires sur les demandes
      if (Math.random() > 0.6) {
        const commentUser = createdUsers[Math.floor(Math.random() * createdUsers.length)]
        if (commentUser.id !== randomUser.id) {
          await prisma.carpoolRequestComment.create({
            data: {
              carpoolRequestId: request.id,
              userId: commentUser.id,
              content: [
                "Je peux peut-√™tre t'emmener !",
                'Regarde mon offre, √ßa pourrait coller',
                "Tu as trouv√© quelqu'un ?",
                'Je cherche aussi depuis cette ville',
              ][Math.floor(Math.random() * 4)],
            },
          })
        }
      }
    }
  }

  console.log('Seed dev termin√© avec succ√®s !')
  if (doReset) console.log('(Reset pr√©alable ex√©cut√©)')
  console.log(`- ${createdUsers.length} utilisateurs cr√©√©s/v√©rifi√©s (dont 1 superadmin)`)
  console.log(`- ${conventions.length} conventions cr√©√©es/v√©rifi√©es`)
  console.log(`- ${createdEditions.length} √©ditions cr√©√©es avec dates vari√©es`)
  console.log('- Posts et commentaires ajout√©s sur les √©ditions')
  console.log('- Propositions de covoiturage et commentaires ajout√©s')
}

main()
  .catch((e) => {
    console.error('Erreur lors du seed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })

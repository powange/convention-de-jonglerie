#!/usr/bin/env tsx
import { spawn } from 'node:child_process'

import bcrypt from 'bcryptjs'
import { config } from 'dotenv'

import { prisma } from '../server/utils/prisma.js'

config()

// Fonction utilitaire pour g√©n√©rer des dates al√©atoires
function getRandomDate(daysFromNow: number, variationDays: number): Date {
  const baseDate = new Date()
  baseDate.setDate(baseDate.getDate() + daysFromNow)
  const variation = Math.floor(Math.random() * variationDays * 2) - variationDays
  baseDate.setDate(baseDate.getDate() + variation)
  return baseDate
}

// Fonction utilitaire pour g√©n√©rer du contenu al√©atoire
function getRandomComment(): string {
  const comments = [
    "Super √©v√©nement ! J'ai h√¢te d'y √™tre ü§π‚Äç‚ôÇÔ∏è",
    "Quelqu'un sait s'il y aura des ateliers de diabolo ?",
    "C'√©tait g√©nial l'ann√©e derni√®re, je recommande !",
    'Des infos sur le camping ?',
    'Premi√®re fois que je viens, des conseils ?',
    "L'ambiance est toujours au top dans cette convention !",
    "J'esp√®re qu'il y aura de la bonne musique cette ann√©e",
    'Qui am√®ne des massues √† √©changer ?',
    'Les enfants sont-ils les bienvenus ?',
    'Y a-t-il des spectacles pr√©vus le soir ?',
  ]
  return comments[Math.floor(Math.random() * comments.length)]
}

async function main() {
  console.log('D√©marrage du seed dev...')

  const args = process.argv.slice(2)
  const doReset = args.includes('--reset') || args.includes('--clear')
  if (doReset) {
    console.log('‚ö†Ô∏è  Option --reset: ex√©cution de prisma migrate reset (DEV uniquement).')
    await new Promise<void>((resolve, reject) => {
      const proc = spawn(
        'npx',
        ['prisma', 'migrate', 'reset', '--force', '--skip-generate', '--skip-seed'],
        {
          stdio: 'inherit',
          env: process.env,
        }
      )
      proc.on('exit', (code) => {
        if (code === 0) resolve()
        else reject(new Error(`prisma migrate reset exited with code ${code}`))
      })
      proc.on('error', reject)
    })
    console.log('‚úÖ Reset Prisma termin√©, insertion des donn√©es de seed...')
  }

  // Cr√©er / r√©cup√©rer un user seed qui sera auteur des conventions/√©ditions
  const adminEmail = process.env.SEED_ADMIN_EMAIL || 'seed-admin@example.com'
  const adminPseudo = process.env.SEED_ADMIN_PSEUDO || 'seedadmin'
  const adminPassword = process.env.SEED_ADMIN_PASSWORD || 'devpass'

  const passwordHash = await bcrypt.hash(adminPassword, 10)

  let user = await prisma.user.findUnique({ where: { email: adminEmail } })
  if (!user) {
    user = await prisma.user.create({
      data: {
        email: adminEmail,
        pseudo: adminPseudo,
        nom: 'Seed',
        prenom: 'Admin',
        password: passwordHash,
        isEmailVerified: true,
      },
    })
    console.log(`User cr√©√©: ${user.email} (id=${user.id})`)
  } else {
    console.log(`User existant: ${user.email} (id=${user.id})`)
  }

  // Cr√©er un superadmin
  const superAdminEmail = 'powange@gmail.com'
  const superAdminPassword = process.env.SUPERADMIN_PASSWORD || 'superadmin123'

  let superAdmin = await prisma.user.findUnique({ where: { email: superAdminEmail } })
  if (!superAdmin) {
    superAdmin = await prisma.user.create({
      data: {
        email: superAdminEmail,
        pseudo: 'SuperAdmin',
        nom: 'Powange',
        prenom: 'Admin',
        password: await bcrypt.hash(superAdminPassword, 10),
        isEmailVerified: true,
        isGlobalAdmin: true,
      },
    })
    console.log(`SuperAdmin cr√©√©: ${superAdmin.email} (id=${superAdmin.id})`)
  } else {
    console.log(`SuperAdmin existant: ${superAdmin.email} (id=${superAdmin.id})`)
  }

  // Cr√©er un utilisateur powange non-admin
  const powangeUserEmail = 'powange@hotmail.com'
  const powangeUserPassword = process.env.POWANGE_PASSWORD || 'powange123'

  let powangeUser = await prisma.user.findFirst({
    where: {
      OR: [{ email: powangeUserEmail }, { pseudo: 'PowangeUser' }],
    },
  })
  if (!powangeUser) {
    powangeUser = await prisma.user.create({
      data: {
        email: powangeUserEmail,
        pseudo: 'PowangeUser',
        nom: 'Comble',
        prenom: 'Pierre',
        password: await bcrypt.hash(powangeUserPassword, 10),
        isEmailVerified: true,
        isGlobalAdmin: false,
      },
    })
    console.log(`Utilisateur Powange cr√©√©: ${powangeUser.email} (id=${powangeUser.id})`)
  } else {
    console.log(`Utilisateur Powange existant: ${powangeUser.email} (id=${powangeUser.id})`)
  }

  // Cr√©er des utilisateurs de test
  const testUsers = [
    { email: 'alice.jongleuse@example.com', pseudo: 'AliceJongle', nom: 'Dubois', prenom: 'Alice' },
    { email: 'bob.cirque@example.com', pseudo: 'BobCircus', nom: 'Martin', prenom: 'Bob' },
    {
      email: 'charlie.diabolo@example.com',
      pseudo: 'CharlieDiab',
      nom: 'Rousseau',
      prenom: 'Charlie',
    },
    { email: 'diana.massues@example.com', pseudo: 'DianaMassues', nom: 'Lefevre', prenom: 'Diana' },
    { email: 'eve.contact@example.com', pseudo: 'EveContact', nom: 'Moreau', prenom: 'Eve' },
  ]

  // Cr√©er des utilisateurs sp√©cialement pour les candidatures de b√©n√©volat
  const volunteerUsers = [
    {
      email: 'marie.benevole@example.com',
      pseudo: 'MarieVolunteer',
      nom: 'Dupont',
      prenom: 'Marie',
    },
    { email: 'paul.aidant@example.com', pseudo: 'PaulHelper', nom: 'Lemoine', prenom: 'Paul' },
    {
      email: 'sophie.entraide@example.com',
      pseudo: 'SophieSupport',
      nom: 'Bernard',
      prenom: 'Sophie',
    },
    { email: 'lucas.engagement@example.com', pseudo: 'LucasCommit', nom: 'Petit', prenom: 'Lucas' },
    { email: 'emma.solidaire@example.com', pseudo: 'EmmaSolid', nom: 'Roux', prenom: 'Emma' },
    { email: 'thomas.devoue@example.com', pseudo: 'ThomasDevoted', nom: 'Blanc', prenom: 'Thomas' },
    { email: 'chloe.investie@example.com', pseudo: 'ChloeInvested', nom: 'Lopez', prenom: 'Chlo√©' },
    { email: 'alex.motive@example.com', pseudo: 'AlexMotiv', nom: 'Garcia', prenom: 'Alex' },
  ]

  const createdUsers = [user, superAdmin, powangeUser] // Inclure l'admin, le superadmin et powange

  for (const userData of testUsers) {
    let testUser = await prisma.user.findUnique({ where: { email: userData.email } })
    if (!testUser) {
      testUser = await prisma.user.create({
        data: {
          ...userData,
          password: await bcrypt.hash('testpass', 10),
          isEmailVerified: true,
        },
      })
      console.log(`Utilisateur de test cr√©√©: ${testUser.email} (id=${testUser.id})`)
    } else {
      console.log(`Utilisateur de test existant: ${testUser.email} (id=${testUser.id})`)
    }
    createdUsers.push(testUser)
  }

  // Cr√©er les utilisateurs b√©n√©voles
  for (const volunteerData of volunteerUsers) {
    let volunteerUser = await prisma.user.findUnique({ where: { email: volunteerData.email } })
    if (!volunteerUser) {
      volunteerUser = await prisma.user.create({
        data: {
          ...volunteerData,
          password: await bcrypt.hash('volunteer123', 10),
          isEmailVerified: true,
        },
      })
      console.log(`Utilisateur b√©n√©vole cr√©√©: ${volunteerUser.email} (id=${volunteerUser.id})`)
    } else {
      console.log(`Utilisateur b√©n√©vole existant: ${volunteerUser.email} (id=${volunteerUser.id})`)
    }
    createdUsers.push(volunteerUser)
  }

  // D√©finitions de conventions √† ins√©rer
  const conventions = [
    {
      name: 'Convention Nationale de Jonglerie',
      description: 'Rassemblement national des jongleurs.',
      authorId: user.id,
    },
    {
      name: 'Festival Jongle & Cirque',
      description: 'Festival convivial avec sc√®nes et ateliers.',
      authorId: superAdmin.id,
    },
    {
      name: 'Convention R√©gionale de Jonglerie',
      description: 'Edition r√©gionale, ambiance locale.',
      authorId: user.id,
    },
    {
      name: 'Festival International du Cirque',
      description: 'Grand rendez-vous des artistes du monde entier.',
      authorId: superAdmin.id,
    },
  ]

  const createdEditions: any[] = []

  for (const convDef of conventions) {
    let conv = await prisma.convention.findFirst({ where: { name: convDef.name } })
    if (!conv) {
      conv = await prisma.convention.create({
        data: {
          name: convDef.name,
          description: convDef.description,
          authorId: convDef.authorId,
        },
      })
      console.log(`Convention cr√©√©e: ${conv.name} (id=${conv.id})`)

      // Ajouter automatiquement l'auteur comme collaborateur ADMINISTRATOR
      await prisma.conventionCollaborator.create({
        data: {
          conventionId: conv.id,
          userId: convDef.authorId,
          addedById: convDef.authorId,
          title: 'Organisateur',
          canEditConvention: true,
          canDeleteConvention: true,
          canManageCollaborators: true,
          canAddEdition: true,
          canEditAllEditions: true,
          canDeleteAllEditions: true,
        },
      })
      console.log(`  ‚Üí Auteur ajout√© comme collaborateur ADMINISTRATOR`)
    } else {
      console.log(`Convention existante: ${conv.name} (id=${conv.id})`)

      // V√©rifier si l'auteur est d√©j√† collaborateur, sinon l'ajouter
      const existingCollab = await prisma.conventionCollaborator.findFirst({
        where: {
          conventionId: conv.id,
          userId: conv.authorId,
        },
      })

      if (!existingCollab) {
        await prisma.conventionCollaborator.create({
          data: {
            conventionId: conv.id,
            userId: conv.authorId,
            addedById: conv.authorId,
            title: 'Organisateur',
            canEditConvention: true,
            canDeleteConvention: true,
            canManageCollaborators: true,
            canAddEdition: true,
            canEditAllEditions: true,
            canDeleteAllEditions: true,
          },
        })
        console.log(`  ‚Üí Auteur ajout√© comme collaborateur ADMINISTRATOR`)
      }
    }

    // Ajouter des collaborateurs suppl√©mentaires pour certaines conventions
    // Pour rendre la base de donn√©es plus r√©aliste
    if (Math.random() > 0.5) {
      const numCollaborators = Math.floor(Math.random() * 3) + 1 // 1-3 collaborateurs
      const availableUsers = createdUsers.filter((u) => u.id !== conv.authorId)

      for (let j = 0; j < Math.min(numCollaborators, availableUsers.length); j++) {
        const randomUser = availableUsers[Math.floor(Math.random() * availableUsers.length)]

        // V√©rifier si cet utilisateur n'est pas d√©j√† collaborateur
        const existingCollab = await prisma.conventionCollaborator.findFirst({
          where: {
            conventionId: conv.id,
            userId: randomUser.id,
          },
        })

        if (!existingCollab) {
          const role = Math.random() > 0.6 ? 'ADMINISTRATOR' : 'MODERATOR'
          await prisma.conventionCollaborator.create({
            data: {
              conventionId: conv.id,
              userId: randomUser.id,
              addedById: conv.authorId,
              title: role === 'ADMINISTRATOR' ? 'Co-organisateur' : undefined,
              // Mapping r√¥le -> nouveaux droits
              // NOTE: legacy mapping bas√© sur role (ADMINISTRATOR/MODERATOR) conserv√© uniquement pour seed local.
              canEditConvention: role === 'ADMINISTRATOR',
              canDeleteConvention: role === 'ADMINISTRATOR',
              canManageCollaborators: role === 'ADMINISTRATOR',
              canAddEdition: true, // MODERATOR et ADMIN peuvent ajouter
              canEditAllEditions: true, // les deux peuvent √©diter toutes les √©ditions
              canDeleteAllEditions: true, // per spec: MODERATOR => canDeleteAllEditions true
            },
          })
          console.log(`  ‚Üí Collaborateur ajout√©: ${randomUser.pseudo} (${role})`)
        }
      }
    }

    // Cr√©er 4 √©ditions par convention avec des dates vari√©es (pass√©es, pr√©sentes, futures)
    const cities = ['Paris', 'Lyon', 'Marseille', 'Toulouse', 'Bordeaux', 'Nantes', 'Strasbourg']

    for (let i = 1; i <= 4; i++) {
      const editionName = `${conv.name} ‚Äî √âdition ${i}`
      let edition = await prisma.edition.findFirst({
        where: { name: editionName, conventionId: conv.id },
      })
      if (!edition) {
        let startDate: Date

        // R√©partir les √©ditions : pass√©es, en cours, futures proches
        if (i === 1) {
          // √âdition pass√©e r√©cente (il y a 2-8 semaines)
          startDate = getRandomDate(-35, 20) // Entre -55 et -15 jours
        } else if (i === 2) {
          // √âdition en cours ou tr√®s r√©cente (il y a 1 semaine √† dans 1 semaine)
          startDate = getRandomDate(-3, 10) // Entre -13 et 7 jours
        } else if (i === 3) {
          // √âdition future proche (dans 2-6 semaines)
          startDate = getRandomDate(21, 14) // Entre 7 et 35 jours
        } else {
          // √âdition future (dans 2-4 mois)
          startDate = getRandomDate(75, 30) // Entre 45 et 105 jours
        }

        const endDate = new Date(startDate)
        // √âditions de 3 √† 6 jours (typique pour les conventions de jonglerie)
        endDate.setDate(startDate.getDate() + Math.floor(Math.random() * 4) + 3) // 3-6 jours

        const randomCity = cities[Math.floor(Math.random() * cities.length)]

        edition = await prisma.edition.create({
          data: {
            name: editionName,
            description: `${conv.name} ‚Äî √©dition ${i}`,
            creatorId: conv.authorId,
            conventionId: conv.id,
            startDate,
            endDate,
            addressLine1: `${Math.floor(Math.random() * 100) + 1} Rue de la Jonglerie`,
            city: randomCity,
            country: 'France',
            postalCode: `${Math.floor(Math.random() * 90000) + 10000}`,
            hasWorkshops: Math.random() > 0.3,
            hasConcert: Math.random() > 0.5,
            hasTentCamping: Math.random() > 0.4,
            hasShowers: Math.random() > 0.2,
            hasToilets: Math.random() > 0.1,
            hasCantine: Math.random() > 0.6,
            isOnline: true,
          },
        })
        console.log(
          `Edition cr√©√©e: ${edition.name} (id=${edition.id}, ${startDate.toLocaleDateString()})`
        )
        createdEditions.push(edition)
      } else {
        console.log(`Edition existante: ${edition.name} (id=${edition.id})`)
        createdEditions.push(edition)
      }
    }

    // Exemple: ajouter quelques permissions sp√©cifiques par √©dition pour le premier collaborateur non-auteur si pr√©sent
    const extraCollaborators = await prisma.conventionCollaborator.findMany({
      where: { conventionId: conv.id, userId: { not: conv.authorId } },
      take: 1,
      orderBy: { addedAt: 'asc' },
    })
    if (extraCollaborators.length && createdEditions.length) {
      const targetCollab = extraCollaborators[0]
      // S√©lectionner 1 √† 2 √©ditions pour des droits sp√©cifiques si pas d√©j√† globalement admin
      const editionSample = createdEditions.filter((e) => e.conventionId === conv.id).slice(0, 2)
      for (const ed of editionSample) {
        await prisma.editionCollaboratorPermission.upsert({
          where: {
            collaboratorId_editionId: { collaboratorId: targetCollab.id, editionId: ed.id },
          },
          create: {
            collaboratorId: targetCollab.id,
            editionId: ed.id,
            canEdit: true,
            canDelete: false,
          },
          update: {},
        })
      }
    }
  }

  // Ajouter des posts (commentaires) sur les √©ditions
  console.log('Ajout des posts sur les √©ditions...')
  for (const edition of createdEditions) {
    const numPosts = Math.floor(Math.random() * 5) + 1 // 1-5 posts par √©dition

    for (let i = 0; i < numPosts; i++) {
      const randomUser = createdUsers[Math.floor(Math.random() * createdUsers.length)]

      const existingPost = await prisma.editionPost.findFirst({
        where: {
          editionId: edition.id,
          userId: randomUser.id,
        },
      })

      if (!existingPost) {
        const post = await prisma.editionPost.create({
          data: {
            editionId: edition.id,
            userId: randomUser.id,
            content: getRandomComment(),
          },
        })

        // Ajouter parfois des commentaires sur les posts
        if (Math.random() > 0.6) {
          const numComments = Math.floor(Math.random() * 3) + 1
          for (let j = 0; j < numComments; j++) {
            const commentUser = createdUsers[Math.floor(Math.random() * createdUsers.length)]
            await prisma.editionPostComment.create({
              data: {
                editionPostId: post.id,
                userId: commentUser.id,
                content: getRandomComment(),
              },
            })
          }
        }
      }
    }
  }

  // Ajouter des propositions de covoiturage
  console.log('Ajout des propositions de covoiturage...')
  const departureCities = [
    'Paris',
    'Lyon',
    'Marseille',
    'Toulouse',
    'Bordeaux',
    'Lille',
    'Nice',
    'Nantes',
  ]

  for (const edition of createdEditions) {
    const numOffers = Math.floor(Math.random() * 4) + 1 // 1-4 offres par √©dition

    for (let i = 0; i < numOffers; i++) {
      // S'assurer que le superadmin cr√©e au moins une offre par √©dition (la premi√®re)
      const randomUser =
        i === 0 ? superAdmin : createdUsers[Math.floor(Math.random() * createdUsers.length)]
      const locationCity = departureCities[Math.floor(Math.random() * departureCities.length)]

      // Date de d√©part 1-2 jours avant le d√©but de l'√©dition
      const tripDate = new Date(edition.startDate)
      tripDate.setDate(tripDate.getDate() - Math.floor(Math.random() * 2) - 1)

      const offer = await prisma.carpoolOffer.create({
        data: {
          userId: randomUser.id,
          editionId: edition.id,
          tripDate,
          locationCity,
          locationAddress: `${Math.floor(Math.random() * 100) + 1} Avenue de la Gare, ${locationCity}`,
          availableSeats: Math.floor(Math.random() * 4) + 1, // 1-4 places
          description: `Covoiturage au d√©part de ${locationCity}. Ambiance conviviale garantie ! Place pour mat√©riel de jonglerie.`,
          phoneNumber: `06${Math.floor(Math.random() * 90000000) + 10000000}`,
        },
      })

      // Ajouter des commentaires sur certaines offres de covoiturage
      if (Math.random() > 0.5) {
        const numComments = Math.floor(Math.random() * 3) + 1
        for (let j = 0; j < numComments; j++) {
          const commentUser = createdUsers[Math.floor(Math.random() * createdUsers.length)]
          if (commentUser.id !== randomUser.id) {
            // Pas de commentaire de l'auteur sur sa propre offre
            await prisma.carpoolComment.create({
              data: {
                carpoolOfferId: offer.id,
                userId: commentUser.id,
                content: [
                  'Est-ce que tu peux passer par Orl√©ans ?',
                  'Super ! Je suis int√©ress√©(e)',
                  '√Ä quelle heure exactement ?',
                  'Y a-t-il de la place pour mes massues ?',
                  'Merci pour la proposition !',
                  'Possible de faire un d√©tour ?',
                  "Je peux participer aux frais d'essence",
                ][Math.floor(Math.random() * 7)],
              },
            })
          }
        }
      }
    }

    // Ajouter aussi quelques demandes de covoiturage
    const numRequests = Math.floor(Math.random() * 3) + 1 // 1-3 demandes par √©dition

    for (let i = 0; i < numRequests; i++) {
      // Le superadmin cr√©e parfois des demandes aussi (30% de chance)
      const randomUser =
        Math.random() < 0.3
          ? superAdmin
          : createdUsers[Math.floor(Math.random() * createdUsers.length)]
      const locationCity = departureCities[Math.floor(Math.random() * departureCities.length)]

      const tripDate = new Date(edition.startDate)
      tripDate.setDate(tripDate.getDate() - Math.floor(Math.random() * 2) - 1)

      const request = await prisma.carpoolRequest.create({
        data: {
          userId: randomUser.id,
          editionId: edition.id,
          tripDate,
          locationCity,
          seatsNeeded: Math.floor(Math.random() * 2) + 1, // 1-2 places
          description: `Recherche covoiturage depuis ${locationCity}. Flexible sur l'horaire !`,
          phoneNumber:
            Math.random() > 0.5 ? `06${Math.floor(Math.random() * 90000000) + 10000000}` : null,
        },
      })

      // Commentaires sur les demandes
      if (Math.random() > 0.6) {
        const commentUser = createdUsers[Math.floor(Math.random() * createdUsers.length)]
        if (commentUser.id !== randomUser.id) {
          await prisma.carpoolRequestComment.create({
            data: {
              carpoolRequestId: request.id,
              userId: commentUser.id,
              content: [
                "Je peux peut-√™tre t'emmener !",
                'Regarde mon offre, √ßa pourrait coller',
                "Tu as trouv√© quelqu'un ?",
                'Je cherche aussi depuis cette ville',
              ][Math.floor(Math.random() * 4)],
            },
          })
        }
      }
    }
  }

  // Configurer les appels √† b√©n√©voles sur certaines √©ditions et cr√©er des candidatures
  console.log('Configuration des appels √† b√©n√©voles...')
  let volunteerApplicationsCount = 0
  let volunteerSettingsCount = 0

  for (const edition of createdEditions) {
    // Configurer un appel √† b√©n√©voles sur environ 60% des √©ditions
    if (Math.random() > 0.4) {
      const setupStartDate = new Date(edition.startDate)
      setupStartDate.setDate(setupStartDate.getDate() - Math.floor(Math.random() * 3) - 1) // 1-3 jours avant

      const teardownEndDate = new Date(edition.endDate)
      teardownEndDate.setDate(teardownEndDate.getDate() + Math.floor(Math.random() * 2) + 1) // 1-2 jours apr√®s

      // Configurer les param√®tres de b√©n√©volat de l'√©dition
      await prisma.edition.update({
        where: { id: edition.id },
        data: {
          volunteersOpen: true,
          volunteersDescription: `Rejoins l'√©quipe b√©n√©vole de ${edition.name} ! Nous recherchons des personnes motiv√©es pour nous aider dans l'organisation de cet √©v√©nement incroyable. Diff√©rentes missions sont disponibles : accueil, logistique, technique, restauration...`,
          volunteersMode: 'INTERNAL',
          volunteersSetupStartDate: setupStartDate,
          volunteersTeardownEndDate: teardownEndDate,
          volunteersAskDiet: true,
          volunteersAskAllergies: true,
          volunteersAskTimePreferences: Math.random() > 0.5,
          volunteersAskTeamPreferences: Math.random() > 0.3,
          volunteersAskPets: Math.random() > 0.7,
          volunteersAskMinors: Math.random() > 0.6,
          volunteersAskVehicle: Math.random() > 0.4,
          volunteersAskCompanion: Math.random() > 0.5,
          volunteersAskAvoidList: Math.random() > 0.8,
          volunteersAskSkills: true,
          volunteersAskExperience: true,
          volunteersAskSetup: true,
          volunteersAskTeardown: true,
        },
      })
      volunteerSettingsCount++

      // Cr√©er des √©quipes b√©n√©voles avec le nouveau syst√®me VolunteerTeam
      const teams: any[] = []
      if (Math.random() > 0.5) {
        const teamNames = [
          'Accueil',
          'Logistique',
          'Technique',
          'Restauration',
          'Animation',
          'S√©curit√©',
        ]
        const teamColors = [
          '#ef4444', // red-500
          '#3b82f6', // blue-500
          '#10b981', // emerald-500
          '#f59e0b', // amber-500
          '#8b5cf6', // violet-500
          '#06b6d4', // cyan-500
        ]
        const numTeams = Math.floor(Math.random() * 4) + 2 // 2-5 √©quipes
        const createdTeamNames: string[] = []

        for (let i = 0; i < numTeams; i++) {
          const teamName = teamNames[Math.floor(Math.random() * teamNames.length)]
          if (!createdTeamNames.includes(teamName)) {
            const team = await prisma.volunteerTeam.create({
              data: {
                editionId: edition.id,
                name: teamName,
                description: `√âquipe ${teamName.toLowerCase()} pour cette √©dition`,
                color: teamColors[Math.floor(Math.random() * teamColors.length)],
                maxVolunteers: Math.floor(Math.random() * 8) + 3, // 3-10 places par √©quipe
              },
            })
            teams.push(team)
            createdTeamNames.push(teamName)
          }
        }
      }

      // Cr√©er des candidatures de b√©n√©voles
      const numApplications = Math.floor(Math.random() * 6) + 3 // 3-8 candidatures par √©dition
      const shuffledVolunteers = [...volunteerUsers, ...testUsers].sort(() => Math.random() - 0.5)

      for (let i = 0; i < Math.min(numApplications, shuffledVolunteers.length); i++) {
        const volunteer = createdUsers.find((u) => u.email === shuffledVolunteers[i].email)
        if (!volunteer) continue

        // V√©rifier qu'il n'y a pas d√©j√† une candidature
        const existingApplication = await prisma.editionVolunteerApplication.findFirst({
          where: {
            editionId: edition.id,
            userId: volunteer.id,
          },
        })

        if (existingApplication) continue

        // Dates d'arriv√©e et d√©part r√©alistes
        const arrivalOptions = ['morning', 'noon', 'afternoon', 'evening']
        const departureOptions = ['morning', 'noon', 'afternoon', 'evening']

        const arrivalDate = new Date(Math.random() > 0.3 ? edition.startDate : setupStartDate)
        const departureDate = new Date(Math.random() > 0.3 ? edition.endDate : teardownEndDate)

        const arrivalDateTime = `${arrivalDate.toISOString().split('T')[0]}_${arrivalOptions[Math.floor(Math.random() * arrivalOptions.length)]}`
        const departureDateTime = `${departureDate.toISOString().split('T')[0]}_${departureOptions[Math.floor(Math.random() * departureOptions.length)]}`

        // Pr√©f√©rences alimentaires r√©alistes
        const dietaryOptions = ['NONE', 'VEGETARIAN', 'VEGAN']
        const dietaryWeights = [0.7, 0.2, 0.1] // 70% aucun, 20% v√©g√©tarien, 10% vegan
        let dietaryPreference = 'NONE'
        const rand = Math.random()
        if (rand < dietaryWeights[2]) dietaryPreference = 'VEGAN'
        else if (rand < dietaryWeights[1] + dietaryWeights[2]) dietaryPreference = 'VEGETARIAN'

        // Disponibilit√©s setup/teardown
        const setupAvailability = Math.random() > 0.4 ? true : null
        const teardownAvailability = Math.random() > 0.5 ? true : null

        const hasExperience = Math.random() > 0.4

        // G√©n√©rer des pr√©f√©rences horaires al√©atoires
        const timeSlots = [
          'early_morning',
          'morning',
          'lunch',
          'early_afternoon',
          'late_afternoon',
          'evening',
          'late_evening',
          'night',
        ]

        let timePreferencesArray: string[] | undefined = undefined
        if (Math.random() > 0.4) {
          // 60% ont des pr√©f√©rences horaires
          const numPreferences = Math.floor(Math.random() * 4) + 1 // 1-4 cr√©neaux
          const shuffledSlots = [...timeSlots].sort(() => Math.random() - 0.5)
          timePreferencesArray = shuffledSlots.slice(0, numPreferences)
        }

        const application = await prisma.editionVolunteerApplication.create({
          data: {
            editionId: edition.id,
            userId: volunteer.id,
            status:
              Math.random() > 0.15 ? 'ACCEPTED' : Math.random() > 0.5 ? 'PENDING' : 'REJECTED', // 85% accept√©es
            arrivalDateTime,
            departureDateTime,
            dietaryPreference: dietaryPreference as any,
            allergies:
              Math.random() > 0.8
                ? ['Arachides', 'Gluten', 'Lactose', 'Fruits √† coque'][
                    Math.floor(Math.random() * 4)
                  ]
                : null,
            timePreferences: timePreferencesArray || undefined,
            teamPreferences:
              teams.length > 0 && Math.random() > 0.6
                ? [
                    teams[Math.floor(Math.random() * teams.length)].name,
                    ...(Math.random() > 0.5 && teams.length > 1
                      ? [teams[Math.floor(Math.random() * teams.length)].name]
                      : []),
                  ].filter((value, index, self) => self.indexOf(value) === index) // Enlever les doublons
                : undefined,
            hasPets: Math.random() > 0.8 ? true : null,
            petsDetails: Math.random() > 0.8 && Math.random() > 0.5 ? 'Un chat tr√®s calme' : null,
            hasMinors: Math.random() > 0.9 ? true : null,
            minorsDetails: Math.random() > 0.9 && Math.random() > 0.5 ? 'Un enfant de 8 ans' : null,
            hasVehicle: Math.random() > 0.6 ? true : null,
            vehicleDetails: Math.random() > 0.6 && Math.random() > 0.5 ? 'Voiture 5 places' : null,
            companionName:
              Math.random() > 0.8
                ? ['Alex Martin', 'Sarah Durand', 'Tom Berger'][Math.floor(Math.random() * 3)]
                : null,
            avoidList: Math.random() > 0.9 ? 'Pr√©f√®re √©viter les t√¢ches en hauteur' : null,
            skills: [
              'Exp√©rience en √©v√©nementiel',
              'Permis poids lourd',
              'Connaissance technique son/lumi√®re',
              'Animation jeunesse',
              'Premiers secours',
              'Cuisine collective',
            ][Math.floor(Math.random() * 6)],
            hasExperience,
            experienceDetails: hasExperience ? 'D√©j√† b√©n√©vole sur plusieurs conventions' : null,
            setupAvailability,
            teardownAvailability,
            eventAvailability:
              !setupAvailability && !teardownAvailability
                ? true
                : Math.random() > 0.3
                  ? true
                  : null,
            motivation: [
              'Envie de contribuer √† la r√©ussite de cet √©v√©nement !',
              'Passionn√© de jonglerie et d√©sir de donner de mon temps',
              'Exp√©rience enrichissante et rencontres garanties',
              "Plaisir de participer √† l'organisation d'une belle convention",
            ][Math.floor(Math.random() * 4)],
          },
        })
        volunteerApplicationsCount++
      }

      // Cr√©er des cr√©neaux de b√©n√©volat et assigner des b√©n√©voles
      if (teams.length > 0) {
        console.log(`  Cr√©ation de cr√©neaux pour l'√©dition ${edition.name}...`)

        // R√©cup√©rer les candidatures accept√©es pour cette √©dition
        const acceptedApplications = await prisma.editionVolunteerApplication.findMany({
          where: {
            editionId: edition.id,
            status: 'ACCEPTED',
          },
          include: {
            user: true,
          },
        })

        // Cr√©er des cr√©neaux pour chaque jour de l'√©dition
        const currentDate = new Date(edition.startDate)
        const endDate = new Date(edition.endDate)
        let totalTimeSlots = 0
        let totalAssignments = 0

        while (currentDate <= endDate) {
          // Cr√©er 3-6 cr√©neaux par jour
          const numSlots = Math.floor(Math.random() * 4) + 3

          for (let slotIndex = 0; slotIndex < numSlots; slotIndex++) {
            // D√©finir les heures de d√©but et fin du cr√©neau
            const startHour = 8 + slotIndex * 3 // Cr√©neaux de 3h commen√ßant √† 8h, 11h, 14h, 17h, 20h
            const startDateTime = new Date(currentDate)
            startDateTime.setHours(startHour, 0, 0, 0)

            const endDateTime = new Date(startDateTime)
            endDateTime.setHours(startHour + 3, 0, 0, 0) // Cr√©neaux de 3 heures

            // Choisir une √©quipe al√©atoire ou pas d'√©quipe (cr√©neau g√©n√©ral)
            const team =
              Math.random() > 0.3 ? teams[Math.floor(Math.random() * teams.length)] : null

            // D√©finir le titre du cr√©neau
            const slotTitles = [
              'Montage stands',
              'Accueil participants',
              'Animation ateliers',
              'Service restauration',
              'Gestion logistique',
              'Support technique',
              'Nettoyage espaces',
              'Surveillance mat√©riel',
              'Information public',
              'Pr√©paration spectacle',
            ]
            const title = slotTitles[Math.floor(Math.random() * slotTitles.length)]

            // Cr√©er le cr√©neau
            const timeSlot = await prisma.volunteerTimeSlot.create({
              data: {
                editionId: edition.id,
                teamId: team?.id || null,
                title,
                description: `${title} ${team ? `pour l'√©quipe ${team.name}` : '(cr√©neau g√©n√©ral)'}`,
                startDateTime,
                endDateTime,
                maxVolunteers: Math.floor(Math.random() * 5) + 2, // 2-6 b√©n√©voles max par cr√©neau
              },
            })
            totalTimeSlots++

            // Assigner des b√©n√©voles au cr√©neau (50-80% de remplissage)
            if (acceptedApplications.length > 0) {
              const fillRate = 0.5 + Math.random() * 0.3 // Entre 50% et 80%
              const numAssignments = Math.min(
                Math.floor(timeSlot.maxVolunteers * fillRate),
                acceptedApplications.length
              )

              // M√©langer les candidats et en prendre quelques-uns
              const shuffledCandidates = [...acceptedApplications].sort(() => Math.random() - 0.5)

              for (let i = 0; i < numAssignments; i++) {
                const candidate = shuffledCandidates[i]

                // V√©rifier que ce b√©n√©vole n'est pas d√©j√† assign√© √† ce cr√©neau
                const existingAssignment = await prisma.volunteerAssignment.findFirst({
                  where: {
                    timeSlotId: timeSlot.id,
                    userId: candidate.userId,
                  },
                })

                if (!existingAssignment) {
                  // V√©rifier la disponibilit√© du b√©n√©vole selon ses pr√©f√©rences horaires
                  let isAvailable = true

                  // V√©rifier si le b√©n√©vole a des pr√©f√©rences d'√©quipe
                  if (
                    team &&
                    candidate.teamPreferences &&
                    Array.isArray(candidate.teamPreferences)
                  ) {
                    // 70% de chance d'√™tre assign√© m√™me si ce n'est pas l'√©quipe pr√©f√©r√©e
                    isAvailable =
                      candidate.teamPreferences.includes(team.name) || Math.random() > 0.3
                  }

                  // V√©rifier les disponibilit√©s setup/teardown/event
                  const isSetupPeriod = startDateTime < new Date(edition.startDate)
                  const isTeardownPeriod = startDateTime > new Date(edition.endDate)

                  if (isSetupPeriod && candidate.setupAvailability === false) {
                    isAvailable = false
                  } else if (isTeardownPeriod && candidate.teardownAvailability === false) {
                    isAvailable = false
                  } else if (
                    !isSetupPeriod &&
                    !isTeardownPeriod &&
                    candidate.eventAvailability === false
                  ) {
                    isAvailable = false
                  }

                  if (isAvailable) {
                    await prisma.volunteerAssignment.create({
                      data: {
                        timeSlotId: timeSlot.id,
                        userId: candidate.userId,
                        assignedById: edition.creatorId, // L'organisateur assigne les b√©n√©voles
                      },
                    })

                    // Mettre √† jour le compteur d'assign√©s
                    await prisma.volunteerTimeSlot.update({
                      where: { id: timeSlot.id },
                      data: { assignedVolunteers: { increment: 1 } },
                    })
                    totalAssignments++
                  }
                }
              }
            }
          }

          // Passer au jour suivant
          currentDate.setDate(currentDate.getDate() + 1)
        }

        console.log(`    ‚Üí ${totalTimeSlots} cr√©neaux cr√©√©s, ${totalAssignments} assignations`)
      }
    }
  }

  // Compter les cr√©neaux et assignations totaux
  const totalSlots = await prisma.volunteerTimeSlot.count()
  const totalAssignments = await prisma.volunteerAssignment.count()

  // Ajouter des r√©servations de covoiturage
  console.log('Ajout des r√©servations de covoiturage...')
  let carpoolBookingsCount = 0
  let carpoolPassengersCount = 0

  const allOffers = await prisma.carpoolOffer.findMany({
    include: { user: true },
  })

  for (const offer of allOffers) {
    // 60% des offres ont au moins une r√©servation
    if (Math.random() > 0.4) {
      const numBookings = Math.min(
        Math.floor(Math.random() * 2) + 1, // 1-2 r√©servations par offre
        offer.availableSeats
      )

      // S√©lectionner des utilisateurs al√©atoires qui ne sont pas l'auteur de l'offre
      const potentialBookers = createdUsers.filter((u) => u.id !== offer.userId)

      for (let i = 0; i < numBookings; i++) {
        const booker = potentialBookers[Math.floor(Math.random() * potentialBookers.length)]

        // V√©rifier qu'il n'a pas d√©j√† r√©serv√© cette offre
        const existingBooking = await prisma.carpoolBooking.findFirst({
          where: {
            carpoolOfferId: offer.id,
            requesterId: booker.id,
          },
        })

        if (!existingBooking) {
          const status =
            Math.random() > 0.2 ? 'CONFIRMED' : Math.random() > 0.5 ? 'PENDING' : 'CANCELLED'

          await prisma.carpoolBooking.create({
            data: {
              carpoolOfferId: offer.id,
              requesterId: booker.id,
              seats: 1,
              message:
                Math.random() > 0.5
                  ? ['Merci !', "J'ai du mat√©riel, est-ce OK ?", '√Ä quelle heure ?'][
                      Math.floor(Math.random() * 3)
                    ]
                  : null,
              status,
            },
          })
          carpoolBookingsCount++

          // Si confirm√©, ajouter comme passager
          if (status === 'CONFIRMED') {
            await prisma.carpoolPassenger.create({
              data: {
                carpoolOfferId: offer.id,
                userId: booker.id,
                addedById: offer.userId,
              },
            })
            carpoolPassengersCount++
          }
        }
      }
    }
  }

  // Ajouter des objets trouv√©s/perdus
  console.log('Ajout des objets trouv√©s/perdus...')
  let lostFoundCount = 0

  for (const edition of createdEditions) {
    // 40% des √©ditions ont des objets trouv√©s/perdus
    if (Math.random() > 0.6) {
      const numItems = Math.floor(Math.random() * 4) + 1 // 1-4 objets par √©dition

      for (let i = 0; i < numItems; i++) {
        const randomUser = createdUsers[Math.floor(Math.random() * createdUsers.length)]
        const isLost = Math.random() > 0.5

        const lostItems = [
          'Massues de jonglerie bleues',
          'Diabolo rouge avec baguettes',
          'Portefeuille noir',
          'Cl√©s de voiture avec porte-cl√©s jongleur',
          'T√©l√©phone Samsung',
          'Sac √† dos vert avec mat√©riel de jonglerie',
          'Veste polaire noire',
          'Lunettes de soleil',
          'Gourde en m√©tal',
          'Chargeur de t√©l√©phone',
        ]

        const foundItems = [
          'Balles de jonglerie trouv√©es pr√®s du gymnase',
          'T√©l√©phone trouv√© dans les toilettes',
          'Porte-monnaie trouv√©',
          'Foulards de jonglerie trouv√©s',
          'Chapeau oubli√©',
          '√âcharpe trouv√©e',
          'Bouteille thermos trouv√©e',
        ]

        const itemDescription = isLost
          ? lostItems[Math.floor(Math.random() * lostItems.length)]
          : foundItems[Math.floor(Math.random() * foundItems.length)]

        const item = await prisma.lostFoundItem.create({
          data: {
            editionId: edition.id,
            userId: randomUser.id,
            description: itemDescription,
            status: isLost ? 'LOST' : 'FOUND',
          },
        })
        lostFoundCount++

        // Ajouter des commentaires sur certains objets
        if (Math.random() > 0.6) {
          const numComments = Math.floor(Math.random() * 2) + 1
          for (let j = 0; j < numComments; j++) {
            const commentUser = createdUsers[Math.floor(Math.random() * createdUsers.length)]
            await prisma.lostFoundComment.create({
              data: {
                lostFoundItemId: item.id,
                userId: commentUser.id,
                content: [
                  'Je pense avoir vu √ßa !',
                  "C'est peut-√™tre √† moi",
                  'O√π puis-je le r√©cup√©rer ?',
                  "Merci pour l'info !",
                ][Math.floor(Math.random() * 4)],
              },
            })
          }
        }
      }
    }
  }

  // Ajouter des feedbacks
  console.log('Ajout des feedbacks...')
  let feedbackCount = 0

  const feedbackTypes = ['BUG', 'SUGGESTION', 'COMPLAINT', 'QUESTION', 'OTHER'] as const
  const feedbackSubjects = {
    BUG: [
      "Erreur lors de la cr√©ation d'une √©dition",
      "Probl√®me d'affichage sur mobile",
      'Impossible de modifier mon profil',
      'Les notifications ne fonctionnent pas',
    ],
    SUGGESTION: [
      'Ajouter un mode sombre',
      'Am√©liorer le syst√®me de recherche',
      'Ajouter des filtres avanc√©s',
      "Permettre l'export en PDF",
    ],
    COMPLAINT: [
      'Convention supprim√©e sans pr√©avis',
      'D√©lai de r√©ponse trop long',
      'Interface pas intuitive',
    ],
    QUESTION: [
      'Comment ajouter un collaborateur ?',
      'Comment fonctionne le syst√®me de b√©n√©volat ?',
      'Puis-je supprimer mon compte ?',
    ],
    OTHER: ['Merci pour cette super app !', 'Question g√©n√©rale'],
  }

  const feedbackMessages = {
    BUG: [
      "J'ai essay√© de cr√©er une √©dition mais j'obtiens une erreur 500. Pouvez-vous regarder ?",
      'Sur mobile, les boutons sont trop petits et se chevauchent.',
      'Impossible de sauvegarder mes modifications de profil.',
    ],
    SUGGESTION: [
      "Ce serait g√©nial d'avoir un mode sombre pour utiliser l'app le soir.",
      'La recherche pourrait √™tre am√©lior√©e avec des filtres par date et lieu.',
      "Un export PDF des √©ditions serait tr√®s utile pour l'impression.",
    ],
    COMPLAINT: [
      "Ma convention a √©t√© supprim√©e sans que je sois pr√©venu. C'est inacceptable !",
      "J'attends une r√©ponse depuis 2 semaines...",
    ],
    QUESTION: [
      "Je ne trouve pas comment ajouter un collaborateur √† ma convention. Pouvez-vous m'aider ?",
      'Comment puis-je configurer le syst√®me de b√©n√©volat pour mon √©dition ?',
    ],
    OTHER: ['Bravo pour cette application, elle est vraiment bien faite !'],
  }

  for (let i = 0; i < 15; i++) {
    const type = feedbackTypes[Math.floor(Math.random() * feedbackTypes.length)]
    const randomUser =
      Math.random() > 0.3 ? createdUsers[Math.floor(Math.random() * createdUsers.length)] : null

    const subjects = feedbackSubjects[type]
    const messages = feedbackMessages[type]

    await prisma.feedback.create({
      data: {
        type,
        subject: subjects[Math.floor(Math.random() * subjects.length)],
        message: messages[Math.floor(Math.random() * messages.length)],
        email: randomUser?.email || 'anonymous@example.com',
        name: randomUser ? `${randomUser.prenom} ${randomUser.nom}` : 'Utilisateur anonyme',
        userId: randomUser?.id,
        resolved: Math.random() > 0.4, // 60% r√©solus
        adminNotes: Math.random() > 0.5 ? 'Trait√© et r√©solu' : null,
      },
    })
    feedbackCount++
  }

  // Ajouter des demandes de r√©clamation de conventions
  console.log('Ajout des demandes de r√©clamation de conventions...')
  let claimRequestsCount = 0

  const conventionsToClaimFor = await prisma.convention.findMany({
    take: 2, // 2 conventions avec des demandes de r√©clamation
  })

  for (const convention of conventionsToClaimFor) {
    // S√©lectionner 1-2 utilisateurs qui veulent r√©clamer cette convention
    const numClaims = Math.floor(Math.random() * 2) + 1
    const potentialClaimers = createdUsers.filter((u) => u.id !== convention.authorId)

    for (let i = 0; i < numClaims; i++) {
      const claimer = potentialClaimers[Math.floor(Math.random() * potentialClaimers.length)]

      // V√©rifier qu'il n'a pas d√©j√† fait une demande
      const existingClaim = await prisma.conventionClaimRequest.findFirst({
        where: {
          conventionId: convention.id,
          userId: claimer.id,
        },
      })

      if (!existingClaim) {
        const code = Math.random().toString(36).substring(2, 8).toUpperCase()
        const expiresAt = new Date()
        expiresAt.setHours(expiresAt.getHours() + 1) // Expire dans 1h

        await prisma.conventionClaimRequest.create({
          data: {
            conventionId: convention.id,
            userId: claimer.id,
            code,
            expiresAt,
            isVerified: Math.random() > 0.5, // 50% v√©rifi√©s
            verifiedAt: Math.random() > 0.5 ? new Date() : null,
          },
        })
        claimRequestsCount++
      }
    }
  }

  // Ajouter des donn√©es de billetterie pour certaines √©ditions
  console.log('Ajout des donn√©es de billetterie...')
  let ticketingEditionsCount = 0
  let ticketingTiersCount = 0
  let ticketingQuotasCount = 0
  let ticketingReturnableItemsCount = 0

  // S√©lectionner 40% des √©ditions futures pour avoir de la billetterie
  const futureEditions = createdEditions.filter((e) => new Date(e.startDate) > new Date())

  for (const edition of futureEditions) {
    if (Math.random() > 0.6) {
      // 40% des √©ditions futures ont de la billetterie
      // Cr√©er des tarifs pour l'√©dition
      const tierNames = [
        { name: 'Tarif plein', description: 'Acc√®s complet √† la convention', price: 2500 }, // 25‚Ç¨
        { name: 'Tarif r√©duit', description: '√âtudiants, ch√¥meurs', price: 1500 }, // 15‚Ç¨
        { name: 'Tarif enfant', description: 'Moins de 12 ans', price: 1000 }, // 10‚Ç¨
        { name: 'Pass journ√©e', description: 'Acc√®s pour une journ√©e', price: 800 }, // 8‚Ç¨
      ]

      const createdTiers: any[] = []
      for (let i = 0; i < tierNames.length; i++) {
        const tierData = tierNames[i]
        const tier = await prisma.ticketingTier.create({
          data: {
            editionId: edition.id,
            name: tierData.name,
            description: tierData.description,
            price: tierData.price,
            position: i,
            isActive: true,
          },
        })
        createdTiers.push(tier)
        ticketingTiersCount++
      }

      // Cr√©er des quotas (nombre de places, repas, etc.)
      const quotaNames = [
        { title: 'Places disponibles', description: 'Nombre total de participants', quantity: 200 },
        { title: 'Repas samedi soir', description: 'Repas collectif', quantity: 150 },
        { title: 'Repas dimanche midi', description: 'Repas collectif', quantity: 120 },
        { title: 'Places camping', description: 'Emplacements camping', quantity: 80 },
      ]

      const createdQuotas: any[] = []
      for (const quotaData of quotaNames) {
        const quota = await prisma.ticketingQuota.create({
          data: {
            editionId: edition.id,
            title: quotaData.title,
            description: quotaData.description,
            quantity: quotaData.quantity,
          },
        })
        createdQuotas.push(quota)
        ticketingQuotasCount++
      }

      // Associer les tarifs aux quotas
      // Tous les tarifs consomment le quota "Places disponibles"
      const placesQuota = createdQuotas[0]
      for (const tier of createdTiers) {
        await prisma.ticketingTierQuota.create({
          data: {
            tierId: tier.id,
            quotaId: placesQuota.id,
          },
        })
      }

      // Cr√©er des objets consign√©s (gobelets, assiettes, etc.)
      const returnableItemNames = [
        'Gobelet r√©utilisable',
        'Assiette r√©utilisable',
        'Bol r√©utilisable',
        'Couverts r√©utilisables',
      ]

      const createdReturnableItems: any[] = []
      for (const itemName of returnableItemNames) {
        const returnableItem = await prisma.ticketingReturnableItem.create({
          data: {
            editionId: edition.id,
            name: itemName,
          },
        })
        createdReturnableItems.push(returnableItem)
        ticketingReturnableItemsCount++
      }

      // Associer les objets consign√©s aux tarifs plein et r√©duit
      for (const tier of createdTiers.slice(0, 2)) {
        // Seulement tarif plein et r√©duit
        for (const item of createdReturnableItems) {
          await prisma.ticketingTierReturnableItem.create({
            data: {
              tierId: tier.id,
              returnableItemId: item.id,
            },
          })
        }
      }

      // Associer certains objets consign√©s aux b√©n√©voles
      if (Math.random() > 0.5) {
        for (const item of createdReturnableItems.slice(0, 2)) {
          // Gobelets et assiettes
          await prisma.editionVolunteerReturnableItem.create({
            data: {
              editionId: edition.id,
              returnableItemId: item.id,
            },
          })
        }
      }

      ticketingEditionsCount++
    }
  }

  console.log('Seed dev termin√© avec succ√®s !')
  if (doReset) console.log('(Reset pr√©alable ex√©cut√©)')
  console.log(
    `- ${createdUsers.length} utilisateurs cr√©√©s/v√©rifi√©s (dont 1 superadmin et ${volunteerUsers.length} b√©n√©voles)`
  )
  console.log(`- ${conventions.length} conventions cr√©√©es/v√©rifi√©es`)
  console.log(`- ${createdEditions.length} √©ditions cr√©√©es avec dates vari√©es`)
  console.log('- Posts et commentaires ajout√©s sur les √©ditions')
  console.log('- Propositions de covoiturage et commentaires ajout√©s')
  console.log(`- ${carpoolBookingsCount} r√©servations de covoiturage cr√©√©es`)
  console.log(`- ${carpoolPassengersCount} passagers confirm√©s`)
  console.log(`- ${lostFoundCount} objets trouv√©s/perdus ajout√©s`)
  console.log(`- ${feedbackCount} feedbacks cr√©√©s (60% r√©solus)`)
  console.log(`- ${claimRequestsCount} demandes de r√©clamation de conventions`)
  console.log(`- ${volunteerSettingsCount} √©ditions configur√©es avec appels √† b√©n√©voles`)
  console.log(`- ${volunteerApplicationsCount} candidatures de b√©n√©volat cr√©√©es (85% accept√©es)`)
  console.log(`- ${totalSlots} cr√©neaux de b√©n√©volat cr√©√©s`)
  console.log(`- ${totalAssignments} assignations de b√©n√©voles aux cr√©neaux`)
  console.log(`- ${ticketingEditionsCount} √©ditions avec billetterie`)
  console.log(`- ${ticketingTiersCount} tarifs de billetterie cr√©√©s`)
  console.log(`- ${ticketingQuotasCount} quotas de billetterie cr√©√©s`)
  console.log(`- ${ticketingReturnableItemsCount} objets consign√©s cr√©√©s`)
}

main()
  .catch((e) => {
    console.error('Erreur lors du seed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })

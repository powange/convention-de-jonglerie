# Docker Compose pour lancer tous les tests en développement
services:
  # Base de données MySQL pour les tests
  test-db:
    image: mysql:8.0
    container_name: convention-test-db
    environment:
      MYSQL_ROOT_PASSWORD: test_root_password
      MYSQL_DATABASE: test_convention_db
      MYSQL_USER: test_user
      MYSQL_PASSWORD: test_password
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 5s
    networks:
      - test-network

  # Container pour exécuter tous les tests
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: convention-test-runner
    environment:
      # Configuration de la base de données pour les tests
      DATABASE_URL: "mysql://test_user:test_password@test-db:3306/test_convention_db"
      TEST_DATABASE_URL: "mysql://test_user:test_password@test-db:3306/test_convention_db"
      
      # Configuration Nuxt et JWT
      JWT_SECRET: "test_jwt_secret_pour_les_tests"
      NUXT_HOST: "0.0.0.0"
      NUXT_PORT: "3000"
      NODE_ENV: "test"
      
      # Configuration des tests
      TEST_WITH_DB: "true"
      CI: "true"
      
      # Désactiver l'envoi d'emails en test
      SEND_EMAILS: "false"
    volumes:
      # Monter le code source pour le hot-reload en dev
      - ./app:/app/app:cached
      - ./server:/app/server:cached
      - ./tests:/app/tests:cached
      - ./scripts:/app/scripts:cached
      - ./prisma:/app/prisma:cached
      - ./public:/app/public:cached
      - ./nuxt.config.ts:/app/nuxt.config.ts:cached
  - ./vitest.config.unit.ts:/app/vitest.config.unit.ts:cached
  - ./vitest.config.ui.ts:/app/vitest.config.ui.ts:cached
      
      # Volumes pour les caches et dépendances
      - node_modules:/app/node_modules
      - nuxt_cache:/app/.nuxt
      - output_cache:/app/.output
    depends_on:
      test-db:
        condition: service_healthy
    networks:
      - test-network
    stdin_open: true
    tty: true
    command: sh /app/scripts/run-all-tests.sh

  # Container optionnel pour lancer les tests avec UI
  test-ui:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: convention-test-ui
    environment:
      DATABASE_URL: "mysql://test_user:test_password@test-db:3306/test_convention_db"
      TEST_DATABASE_URL: "mysql://test_user:test_password@test-db:3306/test_convention_db"
      JWT_SECRET: "test_jwt_secret_pour_les_tests"
      NUXT_HOST: "0.0.0.0"
      NUXT_PORT: "3000"
      NODE_ENV: "test"
      TEST_WITH_DB: "true"
      SEND_EMAILS: "false"
    volumes:
      - ./app:/app/app:cached
      - ./server:/app/server:cached
      - ./tests:/app/tests:cached
      - ./scripts:/app/scripts:cached
      - ./prisma:/app/prisma:cached
      - ./public:/app/public:cached
      - ./nuxt.config.ts:/app/nuxt.config.ts:cached
  - ./vitest.config.unit.ts:/app/vitest.config.unit.ts:cached
  - ./vitest.config.ui.ts:/app/vitest.config.ui.ts:cached
      - node_modules:/app/node_modules
      - nuxt_cache:/app/.nuxt
      - output_cache:/app/.output
    ports:
      - "5173:5173"  # Port pour Vitest UI
    depends_on:
      test-db:
        condition: service_healthy
    networks:
      - test-network
    stdin_open: true
    tty: true
    profiles:
      - ui
    command:
      - sh
      - -c
      - |
        sleep 5
        mkdir -p /app/public/uploads
        npx prisma migrate deploy >/dev/null 2>&1 || true
        npx prisma generate >/dev/null 2>&1
        npx vitest --ui --config vitest.config.ui.ts

volumes:
  node_modules:
    driver: local
  nuxt_cache:
    driver: local
  output_cache:
    driver: local

networks:
  test-network:
    driver: bridge